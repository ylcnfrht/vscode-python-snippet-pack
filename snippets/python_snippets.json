{
  "abs": {
      "prefix": "abs",
      "body": "abs(${1})",
      "description": "Returns the absolute value of a number"
  },
  "all": {
      "prefix": "all",
      "body": "all(${1:iterable})",
      "description": "Returns True if all items in an iterable object are true"
  },
  "any": {
      "prefix": "any",
      "body": "any(${1:iterable})",
      "description": "Returns True if any item in an iterable object is true"
  },
  "ascii": {
      "prefix": "ascii",
      "body": "ascii(${1:object})",
      "description": "Returns a readable version of an object. Replaces none-ascii characters with escape character"
  },
  "bin": {
      "prefix": "bin",
      "body": "bin(${1:x})",
      "description": "Returns the binary version of a number"
  },
  "bool": {
      "prefix": "bool",
      "body": "bool(${1:object})",
      "description": "Returns the boolean value of the specified object"
  },
  "bytearray": {
      "prefix": "bytearray",
      "body": "bytearray([${1:source}[, ${2:encoding}[, ${3:errors}]]])",
      "description": "Returns an array of bytes"
  },
  "bytes": {
      "prefix": "bytes",
      "body": "bytes(${1:x}, ${2:encoding}, ${3:error})",
      "description": "Returns a bytes object"
  },
  "callable": {
      "prefix": "callable",
      "body": "callable(${1:object})",
      "description": "Returns True if the specified object is callable, otherwise False"
  },
  "chr": {
      "prefix": "chr",
      "body": "chr(${1:i})",
      "description": "Returns a character from the specified Unicode code."
  },
  "classmethod": {
      "prefix": "classmethod",
      "body": "classmethod(${1:function})",
      "description": "Converts a method into a class method"
  },
  "compile": {
      "prefix": "compile",
      "body": "compile(${1:source}, ${2:filename}, ${3:mode}, ${4:flag}, ${5:dont_inherit}, ${6:optimize})",
      "description": "Returns the specified source as an object, ready to be executed"
  },
  "complex": {
      "prefix": "complex",
      "body": "complex(${1:real}, ${2:imaginary})",
      "description": "Returns a complex number"
  },
  "delattr": {
      "prefix": "delattr",
      "body": "delattr(${1:object}, ${2:attribute})",
      "description": "Deletes the specified attribute (property or method) from the specified object"
  },
  "dict": {
      "prefix": "dict",
      "body": "dict(${1:keyword}, ${2:arguments})",
      "description": "Returns a dictionary (Array)"
  },
  "dir": {
      "prefix": "dir",
      "body": "dir(${1:object})",
      "description": "Returns a list of the specified object's properties and methods"
  },
  "divmod": {
      "prefix": "divmod",
      "body": "divmod(${1:divident}, ${2:divisor})",
      "description": "Returns the quotient and the remainder when argument1 is divided by argument2"
  },
  "enumerate": {
      "prefix": "enumerate",
      "body": "enumerate(${1:iterable}, ${2:start})",
      "description": "Takes a collection (e.g. a tuple) and returns it as an enumerate object"
  },
  "eval": {
      "prefix": "eval",
      "body": "eval(${1:expression}, ${2:globals}, ${3:locals})",
      "description": "Evaluates and executes an expression"
  },
  "exec": {
      "prefix": "exec",
      "body": "exec(${1:object}, ${2:globals}, ${3:locals})",
      "description": "Executes the specified code (or object)"
  },
  "filter": {
      "prefix": "filter",
      "body": "filter(${1:function}, ${2:iterable})",
      "description": "Use a filter function to exclude items in an iterable object"
  },
  "float": {
      "prefix": "float",
      "body": "float(${1:value})",
      "description": "Returns a floating point number"
  },
  "format": {
      "prefix": ".format",
      "body": ".format()",
      "description": "Formats specified values in a string"
  },
  "f_string": {
      "prefix": "f_string",
      "body": "print(f'${1:text} {${2:var}}')",
      "description": "Formats specified values in a string"
  },
  "frozenset": {
      "prefix": "frozenset",
      "body": "frozenset(${1:iterable})",
      "description": "Returns a frozenset object"
  },
  "getattr": {
      "prefix": "getattr",
      "body": "getattr(${1:object}, ${2:attribute}, ${3:default})",
      "description": "Returns the value of the specified attribute (property or method)"
  },
  "globals": {
      "prefix": "globals",
      "body": "globals()",
      "description": "Returns the current global symbol table as a dictionary"
  },
  "hasattr": {
      "prefix": "hasattr",
      "body": "hasattr(${1:object}, ${2:attribute})",
      "description": "Returns True if the specified object has the specified attribute (property/method)"
  },
  "hash": {
      "prefix": "hash",
      "body": "hash(${1:object})",
      "description": "Returns the hash value of a specified object"
  },
  "help": {
      "prefix": "help",
      "body": "help(${1:object})",
      "description": "Executes the built-in help system"
  },
  "hex": {
      "prefix": "hex",
      "body": "hex(${1:number})",
      "description": "Converts a number into a hexadecimal value"
  },
  "int": {
      "prefix": "int",
      "body": "int(${1:value}, ${2:base})",
      "description": "Returns an integer number"
  },
  "id": {
      "prefix": "id",
      "body": "id(${1:object})",
      "description": "Returns the id of an object"
  },
  "input": {
      "prefix": "input",
      "body": "input(${1:prompt})",
      "description": "Allowing user input"
  },
  "isinstance": {
      "prefix": "isinstance",
      "body": "isinstance(${1:object}, ${2:type})",
      "description": "Returns True if a specified object is an instance of a specified object"
  },
  "issubclass": {
      "prefix": "issubclass",
      "body": "issubclass(${1:object}, ${2:subclass})",
      "description": "Returns True if a specified class is a subclass of a specified object"
  },
  "iter": {
      "prefix": "iter",
      "body": "iter(${1:object}, ${2:subclass})",
      "description": "Returns an iterator object"
  },
  "len": {
      "prefix": "len",
      "body": "len(${1:object})",
      "description": "Returns the length of an object"
  },
  "list": {
      "prefix": "list",
      "body": "list([${1:iterable}])",
      "description": "Returns a list"
  },
  "locals": {
      "prefix": "locals",
      "body": "locals()",
      "description": "Returns an updated dictionary of the current local symbol table"
  },
  "map": {
      "prefix": "map",
      "body": "map(${1:function}, ${2:iterables})",
      "description": "Returns the specified iterator with the specified function applied to each item"
  },
  "max": {
      "prefix": "max",
      "body": "max(${1:iterable})",
      "description": "Returns the largest item in an iterable"
  },
  "memoryview": {
      "prefix": "memoryview",
      "body": "memoryview(${1:obj})",
      "description": "Returns a memory view object"
  },
  "min": {
      "prefix": "min",
      "body": "min(${1:iterable})",
      "description": "Returns the smallest item in an iterable"
  },
  "next": {
      "prefix": "next",
      "body": "next(${1:iterable}, ${2:default})",
      "description": "Returns the next item in an iterable"
  },
  "object": {
      "prefix": "object",
      "body": "object()",
      "description": "Returns a new object"
  },
  "oct": {
      "prefix": "oct",
      "body": "oct(${1:x})",
      "description": "Converts a number into an octal"
  },
  "open": {
      "prefix": "open",
      "body": "open(${1:file}, ${2:mode})",
      "description": "Opens a file and returns a file object"
  },
  "ord": {
      "prefix": "ord",
      "body": "ord(${1:c})",
      "description": "Given a string of length one, return an integer representing the Unicode code point of the character when the argument is a unicode object, or the value of the byte when the argument is an 8-bit string."
  },
  "pow": {
      "prefix": "pow",
      "body": "pow(${1:x}, ${2:y})",
      "description": "Return x to the power y"
  },
  "print_all": {
      "prefix": "print",
      "body": "print(${1:object}(${2:s}), ${3:separator=separator}, ${4:end=end}, ${5:file=file}, ${6:flush=flush})",
      "description": "Prints to the standard output device"
  },
  "print": {
      "prefix": "print",
      "body": "print(${1:string})",
      "description": "Prints to the standard output device"
  },
  "property": {
      "prefix": "property",
      "body": "property(${1:fget=None}, ${2:fset=None}, ${3:fdel=None}, ${4:doc=None})",
      "description": "Gets, sets, deletes a property"
  },
  "range": {
      "prefix": "range",
      "body": "range(${1:start}, ${2:stop}, ${3:step})",
      "description": "Returns a sequence of numbers, starting from 0 and increments by 1 (by default)"
  },
  "repr": {
      "prefix": "repr",
      "body": "repr(${1:object})",
      "description": "Returns a readable version of an object"
  },
  "reversed": {
      "prefix": "reversed",
      "body": "reversed(${1:seq})",
      "description": "Returns a reversed iterator"
  },
  "round": {
      "prefix": "round",
      "body": "round(${1:number}[, ${2:ndigits}])",
      "description": "Rounds a numbers"
  },
  "set": {
      "prefix": "set",
      "body": "set(${1:iterable})",
      "description": "Returns a new set object"
  },
  "setattr": {
      "prefix": "setattr",
      "body": "setattr(${1:object}, ${2:name}, ${3:value})",
      "description": "Sets an attribute (property/method) of an object"
  },
  "slice": {
      "prefix": "slice",
      "body": "slice(${1:start}, ${2:end}, ${3:step})",
      "description": "Returns a slice object"
  },
  "sorted": {
      "prefix": "sorted",
      "body": "sorted(${1:iterable}, ${2:key=key}, ${3:reverse=reverse})",
      "description": "Returns a sorted list"
  },
  "staticmethod": {
      "prefix": "staticmethod",
      "body": "staticmethod(${1:function})",
      "description": "Converts a method into a static method"
  },
  "str": {
      "prefix": "str",
      "body": "str(${1:object}, ${2:encoding=encoding}, ${3:errors=errors})",
      "description": "Returns a string object"
  },
  "sum": {
      "prefix": "sum",
      "body": "sum(${1:iterable}, ${2:start})",
      "description": "Sums the items of an iterator"
  },
  "super": {
      "prefix": "super",
      "body": "super(${1:type})",
      "description": "Return a proxy object that delegates method calls to a parent or sibling class of type."
  },
  "tuple": {
      "prefix": "tuple",
      "body": "tuple(${1:iterable})",
      "description": "Returns a tuple"
  },
  "type": {
      "prefix": "type",
      "body": "type(${1:object}, ${2:bases}, ${3:dict})",
      "description": "Returns the type of an object"
  },
  "unichr": {
      "prefix": "unichr",
      "body": "unichr(${1:i})",
      "description": "Return the Unicode string of one character whose Unicode code is the integer i."
  },
  "vars": {
      "prefix": "vars",
      "body": "vars(${1:object})",
      "description": "Returns the __dict__ property of an object"
  },
  "zip": {
      "prefix": "zip",
      "body": "zip(iterator1, iterqator2, iterator3 ...)",
      "description": "Returns an iterator, from two or more iterators"
  },
  "if": {
      "prefix": "if",
      "body": [
          "if ${1:condition}:",
          "  ${2:code}"
      ],
      "description": "if Statements"
  },
  "ifelif": {
      "prefix": "ifelif",
      "body": [
          "if ${1:condition}:",
          "  ${2:code}",
          "elif ${3:condition}:",
          "  ${4:code}"
      ],
      "description": "if/else if Statements"
  },
  "ifelifelse": {
      "prefix": "ifelifelse",
      "body": [
          "if ${1:condition}:",
          "  ${2:code}",
          "elif ${3:condition}:",
          "  ${4:code}"
          "else:",
          "  ${4:code}"
      ],
      "description": "if/else if/else Statements"
  },
  "ifel": {
      "prefix": "ifelse",
      "body": [
          "if ${1:condition}:",
          "  ${2:code}",
          "else ${3:condition}:",
          "  ${4:code}"
      ],
      "description": "if/else Statements"
  },
  "elif": {
      "prefix": "else",
      "body": [
          "else:",
          "  ${1:code}"
      ],
      "description": "else Statements"
  },
  "ternary": {
      "prefix": "ternary",
      "body": "print('A') if a > b else print('A')",
      "description": "ternary if Statements"
  },
  "lambda": {
      "prefix": "lambda",
      "body": "lambda arguments : expression",
      "description": "A lambda function can take any number of arguments, but can only have one expression."
  },
  "for": {
      "prefix": "for",
      "body": [
          "for ${1:item} in ${2:range}:",
          " "
      ],
      "description": "for Statements"
  },
  "while": {
      "prefix": "while",
      "body": [
          "while ${1:expression}:",
          "  ${2:pass}"
      ],
      "description": "while Statements"
  },
  "while_else": {
      "prefix": "while_else",
      "body": [
          "while expression:",
          "  pass",
          "else:",
          "  pass"
      ],
      "description": "while Statements"
  },
  "function": {
      "prefix": "function=>",
      "body": [
          "def ${1:name}(${2:args}):",
          " ${3:code}"
      ],
      "description": "Defining Function"
  },
  "def": {
      "prefix": "def=>",
      "body": [
          "def ${1:name}(${2:args}):",
          " ${3:code}"
      ],
      "description": "Defining Function"
  },
  "capitalize": {
      "prefix": ".capitalize",
      "body": ".capitalize(${1:code})",
      "description": "Converts the first character to upper case"
  },
  "casefold": {
      "prefix": ".casefold",
      "body": ".casefold(${1:code})",
      "description": "Converts string into lower case"
  },
  "center": {
      "prefix": ".center",
      "body": ".center(${1:code})",
      "description": "Returns a centered string"
  },
  "string.count": {
      "prefix": ".count",
      "body": ".count(${1:code})",
      "description": "Returns the number of times a specified value occurs in a string"
  },
  "encode": {
      "prefix": ".encode",
      "body": ".encode(${1:code})",
      "description": "Returns an encoded version of the string"
  },
  "endswith": {
      "prefix": ".endswith",
      "body": ".endswith(${1:code})",
      "description": "Returns true if the string ends with the specified value"
  },
  "expandtabs": {
      "prefix": ".expandtabs",
      "body": ".expandtabs(${1:code})",
      "description": "Sets the tab size of the string"
  },
  "find": {
      "prefix": ".find",
      "body": ".find(${1:code})",
      "description": "Searches the string for a specified value and returns the position of where it was found"
  },
  "format_map": {
      "prefix": ".format_map",
      "body": ".format_map(${1:code})",
      "description": "Formats specified values in a string"
  },
  "index": {
      "prefix": ".index",
      "body": ".index(${1:value})",
      "description": "Searches the tuple for a specified value and returns the position of where it was found"
  },
  "isalnum": {
      "prefix": ".isalnum",
      "body": ".isalnum()",
      "description": "Returns True if all characters in the string are alphanumeric"
  },
  "isalpha": {
      "prefix": ".isalpha",
      "body": ".isalpha()",
      "description": "Returns True if all characters in the string are in the alphabet"
  },
  "isdecimal": {
      "prefix": ".isdecimal",
      "body": ".isdecimal()",
      "description": "Returns True if all characters in the string are decimals"
  },
  "isdigit": {
      "prefix": ".isdigit",
      "body": ".isdigit()",
      "description": "Returns True if all characters in the string are digits"
  },
  "isidentifier": {
      "prefix": ".isidentifier",
      "body": ".isidentifier()",
      "description": "Returns True if the string is an identifier"
  },
  "islower": {
      "prefix": ".islower",
      "body": ".islower()",
      "description": "Returns True if all characters in the string are lower case"
  },
  "isnumeric": {
      "prefix": ".isnumeric",
      "body": ".isnumeric()",
      "description": "Returns True if all characters in the string are numeric"
  },
  "isprintable": {
      "prefix": ".isprintable",
      "body": ".isprintable()",
      "description": "Returns True if all characters in the string are printable"
  },
  "isspace": {
      "prefix": ".isspace",
      "body": ".isspace()",
      "description": "Returns True if all characters in the string are whitespaces"
  },
  "istitle": {
      "prefix": ".istitle",
      "body": ".istitle()",
      "description": "Returns True if the string follows the rules of a title"
  },
  "isupper": {
      "prefix": ".isupper",
      "body": ".isupper()",
      "description": "Returns True if all characters in the string are upper case"
  },
  "join": {
      "prefix": ".join",
      "body": ".join(${1:code})",
      "description": "Joins the elements of an iterable to the end of the string"
  },
  "ljust": {
      "prefix": ".ljust",
      "body": ".ljust()",
      "description": "Returns a left justified version of the string"
  },
  "lower": {
      "prefix": ".lower",
      "body": ".lower()",
      "description": "Converts a string into lower case"
  },
  "lstrip": {
      "prefix": ".lstrip",
      "body": ".lstrip()",
      "description": "Returns a left trim version of the string"
  },
  "maketrans": {
      "prefix": ".maketrans",
      "body": ".maketrans()",
      "description": "Returns a translation table to be used in translations"
  },
  "partition": {
      "prefix": ".partition",
      "body": ".partition()",
      "description": "Returns a tuple where the string is parted into three parts"
  },
  "replace": {
      "prefix": ".replace",
      "body": ".replace(${1:x}, ${2:y})",
      "description": "Returns a string where a specified value is replaced with a specified value"
  },
  "rfind": {
      "prefix": ".rfind",
      "body": ".rfind()",
      "description": "Searches the string for a specified value and returns the last position of where it was found"
  },
  "rindex": {
      "prefix": ".rindex",
      "body": ".rindex()",
      "description": "Searches the string for a specified value and returns the last position of where it was found"
  },
  "rpartition": {
      "prefix": ".rpartition",
      "body": ".rpartition()",
      "description": "Returns a tuple where the string is parted into three parts"
  },
  "rsplit": {
      "prefix": ".rsplit",
      "body": ".rsplit()",
      "description": "Returns a right trim version of the string"
  },
  "split": {
      "prefix": ".split",
      "body": ".split()",
      "description": "Splits the string at the specified separator, and returns a list"
  },
  "splitlines": {
      "prefix": ".splitlines",
      "body": ".splitlines()",
      "description": "Splits the string at line breaks and returns a list"
  },
  "startswith": {
      "prefix": ".startswith",
      "body": ".startswith()",
      "description": "Returns true if the string starts with the specified value"
  },
  "swapcase": {
      "prefix": ".swapcase",
      "body": ".swapcase()",
      "description": "Swaps cases, lower case becomes upper case and vice versa"
  },
  "title": {
      "prefix": ".title",
      "body": ".title()",
      "description": "Converts the first character of each word to upper case"
  },
  "translate": {
      "prefix": ".translate",
      "body": ".translate()",
      "description": "Returns a translated string"
  },
  "upper": {
      "prefix": ".upper",
      "body": ".upper()",
      "description": "Converts a string into upper case"
  },
  "zfill": {
      "prefix": ".zfill",
      "body": ".zfill()",
      "description": "Fills the string with a specified number of 0 values at the beginning"
  },
  "append": {
      "prefix": ".append",
      "body": ".append(${1:code})",
      "description": "Adds an element at the end of the list"
  },
  "clear": {
      "prefix": ".clear",
      "body": ".clear()",
      "description": "Removes all the elements from the set"
  },
  "copy": {
      "prefix": ".copy",
      "body": ".copy()",
      "description": "Returns a copy of the set"
  },
  "list.count": {
      "prefix": ".count",
      "body": ".count",
      "description": "Returns the number of elements with the specified value"
  },
  "extend": {
      "prefix": ".extend",
      "body": ".extend()",
      "description": "Add the elements of a list (or any iterable), to the end of the current list"
  },
  "insert": {
      "prefix": ".insert",
      "body": ".insert()",
      "description": "Adds an element at the specified position"
  },
  "pop": {
      "prefix": ".pop",
      "body": ".pop()",
      "description": "Removes the specified element"
  },
  "remove": {
      "prefix": ".remove",
      "body": ".remove()",
      "description": "Removes the specified element"
  },
  "reverse": {
      "prefix": ".reverse",
      "body": ".reverse()",
      "description": "Reverses the order of the list"
  },
  "sort": {
      "prefix": ".sort",
      "body": ".sort()",
      "description": "Sorts the list"
  },
  "fromkeys": {
      "prefix": ".fromkeys",
      "body": ".fromkeys(${1:x}, ${1:y})",
      "description": "Returns a dictionary with the specified keys and values"
  },
  "get": {
      "prefix": ".get",
      "body": ".get()",
      "description": "Returns the value of the specified key"
  },
  "items": {
      "prefix": ".items",
      "body": ".items()",
      "description": "Returns a list containing the a tuple for each key value pair"
  },
  "keys": {
      "prefix": ".keys",
      "body": ".keys()",
      "description": "Returns a list containing the dictionary's keys"
  },
  "popitem": {
      "prefix": ".popitem",
      "body": ".popitem()",
      "description": "Removes the last inserted key-value pai"
  },
  "setdefault": {
      "prefix": ".setdefault",
      "body": ".setdefault()",
      "description": "Returns the value of the specified key. If the key does not exist: insert the key, with the specified value"
  },
  "update": {
      "prefix": ".update",
      "body": "x.update(${1:code})",
      "description": "Update the set with the union of this set and others"
  },
  "values": {
      "prefix": ".values",
      "body": ".values()",
      "description": "Returns a list of all the values in the dictionary"
  },
  "tuple.count": {
      "prefix": ".count",
      "body": ".count(${1:code})",
      "description": "Returns the number of times a specified value occurs in a tuple"
  },
  "add": {
      "prefix": ".add",
      "body": ".add()",
      "description": "Adds an element to the set"
  },
  "difference": {
      "prefix": ".difference",
      "body": ".difference(${1:code})",
      "description": "Returns a set containing the difference between two or more sets"
  },
  "difference_update": {
      "prefix": ".difference_update",
      "body": ".difference_update(${1:code})",
      "description": "Removes the items in this set that are also included in another, specified set"
  },
  "discard": {
      "prefix": ".discard",
      "body": ".discard()",
      "description": "Remove the specified item"
  },
  "intersection": {
      "prefix": ".intersection",
      "body": ".intersection(${1:code})",
      "description": "Returns a set, that is the intersection of two other sets"
  },
  "intersection_update": {
      "prefix": ".intersection_update",
      "body": ".intersection_update(${1:code})",
      "description": "Removes the items in this set that are not present in other, specified set(s)"
  },
  "isdisjoint": {
      "prefix": ".isdisjoint",
      "body": ".isdisjoint(${1:code})",
      "description": "Returns whether two sets have a intersection or not"
  },
  "issubset": {
      "prefix": ".issubset",
      "body": ".issubset(${1:code})",
      "description": "Returns whether another set contains this set or not"
  },
  "issuperset": {
      "prefix": ".issuperset",
      "body": ".issuperset(${1:code})",
      "description": "Returns whether this set contains another set or not"
  },
  "symmetric_difference": {
      "prefix": ".symmetric_difference",
      "body": ".symmetric_difference(${1:code})",
      "description": "Returns a set with the symmetric differences of two sets"
  },
  "symmetric_difference_update": {
      "prefix": ".symmetric_difference_update",
      "body": ".symmetric_difference_update(${1:code})",
      "description": "inserts the symmetric differences from this set and another"
  },
  "union": {
      "prefix": ".union",
      "body": ".union(${1:code})",
      "description": "Return a set containing the union of sets"
  },
  "class": {
      "prefix": "class=>",
      "body": [
          "class ${1:name}:",
          "  ${2:code}"
      ],
      "description": "python class"
  },
  "__init__": {
      "prefix": "__init__=>",
      "body": [
          "def __init__(self, ${1:input1}):",
          "  self.${3:something} = ${2:other}",
      ],
      "description": "__init__ method"
  },
  "__iter__": {
      "prefix": "__iter__=>",
      "body": [
          "def __iter__(self):",
          "  self.a = 1",
          "  return self"
      ],
      "description": "__iter__ method"
  },
  "__next__": {
      "prefix": "__next__=>",
      "body": [
          "def __next__(self):",
          "  x = self.a",
          "  self.a += 1",
          "  return x"
      ],
      "description": "__next__ method"
  },
  "import": {
      "prefix": "import=>",
      "body": "import ${1:module} as ${2:var}",
      "description": "import module"
  },
  "tryexcept": {
      "prefix": "trye=>",
      "body": [
          "try:",
          "  ${1:code}",
          "except:",
          "  ${2:code}"
      ],
      "description": "tryexcept method"
  },
  "tryexceptfinally": {
      "prefix": "tryef=>",
      "body": [
          "try:",
          "  ${1:code}",
          "except:",
          "  ${2:code}",
          "finally:",
          "  ${3:code}"
      ],
      "description": "tryexceptfinally method"
  },
  "openFile": {
      "prefix": "file=>openFile",
      "body": [
          "f = open(${1:fileName}, '${2:mode}')",
          "f.read()"
      ],
      "description": "open a file"
  },
  "openFileReadLine": {
      "prefix": "file=>openFileReadLine",
      "body": [
          "f = open('demofile.txt', 'r')",
          "print(f.readline())"
      ],
      "description": "Read one line of the file"
  },
  "writeExistFile": {
      "prefix": "file=>writeExistFile",
      "body": [
          "f = open('demofile.txt', 'a')",
          "f.write('Now the file has one more line!')"
      ],
      "description": "Write to an Existing File"
  },
  "writeOwerWrite": {
      "prefix": "file=>writeOwerWrite",
      "body": [
          "f = open('demofile.txt', 'w')",
          "f.write('Woops! I have deleted the content!')"
      ],
      "description": "Open a file and overwrite the content"
  },
  "createFileIfDoesNotExist": {
      "prefix": "file=>createFileIfDoesNotExist",
      "body": "f = open('myfile.txt', 'w')",
      "description": "Create a new file if it does not exist"
  },
  "createFile": {
      "prefix": "file=>createFile",
      "body": "f = open('myfile.txt', 'x')",
      "description": "Create a new file"
  },
  "deleteFile": {
      "prefix": "file=>deleteFile",
      "body": [
          "#import os",
          "os.remove('demofile.txt')"
      ],
      "description": "delete a file"
  }
}