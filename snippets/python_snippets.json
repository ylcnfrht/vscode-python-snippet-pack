{
  "datatype": {
    "prefix": "datatype",
    "body": "str|int|float|complex|list|tuple|range|dict|set|frozenset|bool|bytes|bytearray|memoryview",
    "description": "datatype of Strings in python"
  },
  "datatype.str": {
    "prefix": "str",
    "body": "${1:variableName} = \"${2:text}\"$0",
    "description": "datatype of Strings in python"
  },
  "datatype.complex": {
    "prefix": "complex",
    "body": "${1:variableName} = ${2:1}j$0",
    "description": "datatype of Complex in python"
  },
  "datatype.list": {
    "prefix": "list",
    "body": "${1:variableName} = [${2:\"objectA\"}, ${3:\"objectB\"}, ${4:\"objectC\"}]$0",
    "description": "datatype of list in python"
  },
  "datatype.tuple": {
    "prefix": "tuple",
    "body": "${1:variableName} = (${2:\"objectA\"}, ${3:\"objectB\"}, ${4:\"objectC\"})$0",
    "description": "datatype of tuple in python"
  },
  "datatype.dict": {
    "prefix": "dict",
    "body": "${1:variableName} = {${2:\"key\"}:${3:value}, ${4:\"name\"}:${5:\"eric\"}, ${6:\"age\"}:${7:24}}$0",
    "description": "datatype of dict in python"
  },
  "datatype.set": {
    "prefix": "set",
    "body": "${1:variableName} = {${2:\"objectA\"}, ${3:\"objectB\"}, ${4:\"objectC\"}}$0",
    "description": "datatype of set in python"
  },
  "datatype.frozenset": {
    "prefix": "frozenset",
    "body": "${1:variableName} = frozenset({${2:\"objectA\"}, ${3:\"objectB\"}, ${4:\"objectC\"}})$0",
    "description": "datatype of frozenset in python"
  },
  "datatype.bool": {
    "prefix": "bool",
    "body": "${1:variableName} = ${2:False}$0",
    "description": "datatype of bool in python"
  },
  "datatype.bytes": {
    "prefix": "bytes",
    "body": "${1:variableName} = b${2:\"meow\"}$0",
    "description": "datatype of bytes in python"
  },
  "datatype.bytearray": {
    "prefix": "bytearray",
    "body": "${1:variableName} = bytearray(${2:number})$0",
    "description": "datatype of bytearray in python"
  },
  "datatype.memoryview": {
    "prefix": "",
    "body": "${1:variableName} = memoryview(${2:bytes-like object})$0",
    "description": "datatype of memoryview in python"
  },
  "abs": {
    "prefix": "abs",
    "body": "abs(${1:number})$0",
    "description": "Return the absolute value of a number"
  },
  "apply.abs=>int": {
    "prefix": "apply.abs=>int",
    "body": ["x = abs(-7.25)", "print(x)"],
    "description": "An example for using abs method"
  },
  "apply.abs=>float": {
    "prefix": "apply.abs=>float",
    "body": ["x = abs(-20)", "print(x)"],
    "description": "An example for using abs method"
  },
  "apply.abs=>complex": {
    "prefix": "apply.abs=>complex",
    "body": ["x = abs((3 - 4j))", "print(x)"],
    "description": "An example for using abs method"
  },
  "all": {
    "prefix": "all",
    "body": "all(${1:iterable})$0",
    "description": "Return True if all items in an iterable object are true"
  },
  "apply.all=>list_1": {
    "prefix": "apply.all=>list_1",
    "body": ["mylist = [True, True, True]", "x = all(mylist)", "print(x)\n", "# Return True"],
    "description": "An example for using all with list"
  },
  "apply.all=>list_2": {
    "prefix": "apply.all=>list_2",
    "body": ["mylist = [0, 1, 1]", "x = all(mylist)", "print(x)\n", "# Return False because 0 is the same as False"],
    "description": "An example for using all with list"
  },
  "apply.all=>tuple": {
    "prefix": "apply.all=>tuple",
    "body": ["mytuple = (0, True, False)", "x = all(mytuple)", "print(x)\n", "# Return False because both the first and the third items are False"],
    "description": "An example for using all with tuple"
  },
  "apply.all=>set": {
    "prefix": "apply.all=>set",
    "body": ["myset = {0, 1, 0}", "x = all(myset)", "print(x)\n", "# Return False because both the first and the third items are False"],
    "description": "An example for using all with set"
  },
  "apply.all=>dictionary": {
    "prefix": "apply.all=>dictionary",
    "body": ["mydict = {0 : 'Apple', 1 : 'Orange'}", "x = all(mydict)", "print(x)\n", "# Return False because the first key is 0(False).", "# For dictionaries the all() function checks the keys, not the values."],
    "description": "An example for using all with dictionary"
  },
  "any": {
    "prefix": "any",
    "body": "any(${1:iterable})$0",
    "description": "Return True if any item in an iterable object is true"
  },
  "apply.any=>list_1": {
    "prefix": "apply.any=>list_1",
    "body": ["mylist = [False, True, False]", "x = ant(mylist)", "print(x)\n", "# Return True"],
    "description": "An example for using all with list"
  },
  "ascii": {
    "prefix": "ascii",
    "body": "ascii(${1:object})$0",
    "description": "Return a readable version of an object. Replaces none-ascii characters with escape character"
  },
  "apply.ascii=>_1": {
    "prefix": "apply.ascii=>_list_1",
    "body": ["x = ascii('My name is MEÃ˜W')", "print(x)"],
    "description": "An example for using ascii"
  },
  "bin": {
    "prefix": "bin",
    "body": "bin(${1:number})$0",
    "description": "Return the binary version of a number"
  },
  "apply.bin=>_1": {
    "prefix": "apply.bin=>_1",
    "body": ["x = bin(36)", "print(x)", "# Result : 0b100100"],
    "description": "An example for using ascii"
  },
  "bool=>": {
    "prefix": "bool=>",
    "body": "bool(${1:object})$0",
    "description": "Return the boolean value of the specified object"
  },
  "apply.bool=>_1": {
    "prefix": "apply.bool=>_1",
    "body": ["x = bool(1)", "print(x)", "# Result : True"],
    "description": "An example for using bool"
  },
  "bytearray=>": {
    "prefix": "bytearray=>",
    "body": "bytearray(${1:integer|bytes_or_buffer|iterable_of_ints})$0",
    "description": "Return an array of bytes"
  },
  "apply.bytearray=>": {
    "prefix": "apply.bytearray",
    "body": "bytearray([source[, encoding[, errors]]])",
    "description": "Return an array of bytes"
  },
  "apply.bytearray=>_1": {
    "prefix": "apply.bytearray=>_1",
    "body": ["x = bytearray(4)", "print(x)"],
    "description": "An example for using bool"
  },
  "bytes=>": {
    "prefix": "bytes=>",
    "body": "bytes(${1:integer|bytes_or_buffer|iterable_of_ints})$0",
    "description": "Return a bytes object"
  },
  "apply.bytes=>": {
    "prefix": "apply.bytes",
    "body": "bytes(x, encoding, error)",
    "description": "Return a bytes object"
  },
  "apply.bytes=>_1": {
    "prefix": "apply.bytes=>_1",
    "body": ["x = x = bytes(4)", "print(x)"],
    "description": "An example for using bytes"
  },
  "callable": {
    "prefix": "callable",
    "body": "callable(${1:object})$0",
    "description": "Return True if the specified object is callable, otherwise False"
  },
  "apply.callable=>_1": {
    "prefix": "apply.callable=>_1",
    "body": ["def x():", "a = 5\n", "print(callable(x))"],
    "description": "An example for using callable"
  },
  "apply.callable=>_2": {
    "prefix": "apply.callable=>_2",
    "body": ["x = 5\n", "print(callable(x))"],
    "description": "An example for using bytes"
  },
  "chr": {
    "prefix": "chr",
    "body": "chr(${1:number})$0",
    "description": "Return a character from the specified Unicode code."
  },
  "apply.chr=>_1": {
    "prefix": "apply.chr=>_1",
    "body": ["x = chr(97)\n", "print(x)"],
    "description": "An example for using bytes"
  },
  "classmethod": {
    "prefix": "classmethod",
    "body": "classmethod(${1:function})$0",
    "description": "Converts a method into a class method"
  },
  "compile": {
    "prefix": "compile",
    "body": "compile(${1:source}, ${2:filename}, ${3:mode}, ${4:flag}, ${5:dont_inherit}, ${6:optimize})$0",
    "description": "Return the specified source as an object, ready to be executed"
  },
  "apply.compile=>_1": {
    "prefix": "apply.compile=>_1",
    "body": ["mytext = 'print(55)'", "x = compile(mytext, 'test', 'eval')", "exec(x)"],
    "description": "An example for using compile"
  },
  "complex=>": {
    "prefix": "complex=>",
    "body": "complex(${1:real}, ${2:imaginary})$0",
    "description": "Return a complex number"
  },
  "apply.complex=>_1": {
    "prefix": "apply.complex=>_1",
    "body": ["x = complex(3, 5)", "print(x)"],
    "description": "An example for using complex"
  },
  "apply.complex=>_2": {
    "prefix": "apply.complex=>_2",
    "body": ["x = complex('3+5j')", "print(x)"],
    "description": "An example for using complex"
  },
  "delattr": {
    "prefix": "delattr",
    "body": "delattr(${1:object}, ${2:attribute})$0",
    "description": "Deletes the specified attribute (property or method) from the specified object"
  },
  "apply.delattr=>_1": {
    "prefix": "apply.delattr=>_1",
    "body": ["class Person:\n\tname = 'John'\n\tage = 36\n\tcountry = 'Norway'\n", "delattr(Person, 'age')", "# The Person object will no longer contain an age property"],
    "description": "An example for using delattr"
  },
  "dict=>": {
    "prefix": "dict=>",
    "body": "dict(${1:key}, ${2:value})$0",
    "description": "Return a dictionary (Array)"
  },
  "apply.dict=>_1": {
    "prefix": "apply.dict=>_1",
    "body": ["x = dict(name = 'John', age = 36, country = 'Norway')", "print(x)"],
    "description": "An example for using dict"
  },
  "dir": {
    "prefix": "dir",
    "body": "dir(${1:object})$0",
    "description": "Return a list of the specified object's properties and methods"
  },
  "apply.dir=>": {
    "prefix": "apply.dir=>",
    "body": ["class Person:\n\tname = 'John'\n\tage = 36\n\tcountry = 'Norway'", "print(dir(Person))"],
    "description": "An example for using dict"
  },
  "divmod": {
    "prefix": "divmod",
    "body": "divmod(${1:divident}, ${2:divisor})$0",
    "description": "Return the quotient and the remainder when argument1 is divided by argument2"
  },
  "apply.divmod=>_1": {
    "prefix": "apply.divmod=>_1",
    "body": ["x = divmod(5, 2)", "print(x)"],
    "description": "An example for using divmod"
  },
  "enumerate": {
    "prefix": "enumerate",
    "body": "enumerate(${1:iterable}, ${2:start})$0",
    "description": "Takes a collection (e.g. a tuple) and Return it as an enumerate object"
  },
  "apply.enumerate=>_1": {
    "prefix": "apply.enumerate=>_1",
    "body": ["x = ('apple', 'banana', 'cherry')", "y = enumerate(x)\n", "print(list(y))"],
    "description": "An example for using enumerate"
  },
  "eval": {
    "prefix": "eval",
    "body": "eval(${1:expression}, ${2:globals}, ${3:locals})$0",
    "description": "Evaluates and executes an expression"
  },
  "apply.eval=>_1": {
    "prefix": "apply.eval=>_1",
    "body": ["x = 'print(55)'", "eval(x)"],
    "description": "An example for using eval"
  },
  "exec": {
    "prefix": "exec",
    "body": "exec(${1:object}, ${2:globals}, ${3:locals})$0",
    "description": "Executes the specified code (or object)"
  },
  "apply.exec=>_1": {
    "prefix": "apply.exec=>_1",
    "body": ["x = 'age = 25\nprint(age)'", "exec(x)"],
    "description": "An example for using exec"
  },
  "filter": {
    "prefix": "filter",
    "body": "filter(${1:function}, ${2:iterable})$0",
    "description": "Use a filter function to exclude items in an iterable object"
  },
  "apply.filter=>_1": {
    "prefix": "apply.filter=>_1",
    "body": ["ages = [5, 12, 17, 18, 24, 32]\n", "def myFunc(x):\n\tif x < 18:", "\treturn False\n\telse:", "\treturn True\n", "adults = filter(myFunc, ages)\n", "for x in adults:\n\tprint(x)"],
    "description": "An example for using filter"
  },
  "float": {
    "prefix": "float",
    "body": "float(${1:string})$0",
    "description": "Return a floating point number"
  },
  "apply.float=>_1": {
    "prefix": "apply.float=>_1",
    "body": ["x = float(3)", "print(x)"],
    "description": "An example for using float"
  },
  "apply.float=>_2": {
    "prefix": "apply.float=>_2",
    "body": ["x = float('3.500')", "print(x)"],
    "description": "An example for using float"
  },
  "format": {
    "prefix": "format",
    "body": "format(${1:value}, ${2:format})$0",
    "description": "Formats a specified value"
  },
  "apply.format=>_1": {
    "prefix": "apply.format=>_1",
    "body": ["x = format(0.5, '%')", "print(x)"],
    "description": "An example for using format"
  },
  "apply.format=>_1": {
    "prefix": "apply.format=>_1",
    "body": ["x = format(255, 'x')", "print(x)"],
    "description": "An example for using format"
  },
  "frozenset=>": {
    "prefix": "frozenset=>",
    "body": "frozenset(${1:iterable})$0",
    "description": "Return a frozenset object"
  },
  "apply.frozenset=>_1": {
    "prefix": "apply.frozenset=>_1",
    "body": ["mylist = ['apple', 'banana', 'cherry']", "x = frozenset(mylist)", "print(x)"],
    "description": "An example for using frozenset"
  },
  "apply.frozenset=>_2": {
    "prefix": "apply.frozenset=>_2",
    "body": ["mylist = ['apple', 'banana', 'cherry']", "x = frozenset(mylist)", "x[1] = 'strawberry'", "print(x)"],
    "description": "An example for using frozenset"
  },
  "getattr": {
    "prefix": "getattr",
    "body": "getattr(${1:object}, ${2:attribute}, ${3:default})$0",
    "description": "Return the value of the specified attribute (property or method)"
  },
  "apply.frozenset=>_3": {
    "prefix": "apply.frozenset=>_3",
    "body": ["class Person:\n\tname = 'John'\n\tage = 36\n\tcountry = 'Norway'\n", "x = getattr(Person, 'age')\n", "print(x)"],
    "description": "An example for using frozenset"
  },
  "globals": {
    "prefix": "globals",
    "body": "globals(${1:})$0",
    "description": "Return the current global symbol table as a dictionary"
  },
  "apply.globals=>_1": {
    "prefix": "apply.globals=>_1",
    "body": ["x = globals()", "print(x)"],
    "description": "An example for using globals"
  },
  "apply.globals=>_2": {
    "prefix": "apply.globals=>_2",
    "body": ["x = globals()", "print(x['__file__'])"],
    "description": "An example for using globals"
  },
  "hasattr": {
    "prefix": "hasattr",
    "body": "hasattr(${1:object}, ${2:attribute})$0",
    "description": "Return True if the specified object has the specified attribute (property/method)"
  },
  "apply.hasattr=>": {
    "prefix": "apply.hasattr=>",
    "body": ["class Person:\n\tname = 'John'\n\tage = 36\n\tcountry = 'Norway'\n", "x = hasattr(Person, 'age')\n", "print(x)"],
    "description": "An example for using hasattr"
  },
  "hash": {
    "prefix": "hash",
    "body": "hash(${1:object})$0",
    "description": "Return the hash value of a specified object"
  },
  "help": {
    "prefix": "help",
    "body": "help(${1:object})$0",
    "description": "Executes the built-in help system"
  },
  "hex": {
    "prefix": "hex",
    "body": "hex(${1:number})$0",
    "description": "Converts a number into a hexadecimal value"
  },
  "apply.hex=>": {
    "prefix": "apply.hex=>",
    "body": ["x = hex(255)", "print(x)"],
    "description": "An example for using hasattr"
  },
  "int": {
    "prefix": "int",
    "body": "int(\"${1:string}\")$0",
    "description": "typecast string to integer number"
  },
  "int(value, base)": {
    "prefix": "int(value, base)",
    "body": "int(\"${1:string}\", \"${2:number})$0",
    "description": "Return base 10 of the base number of second arg"
  },
  "apply.int=>_1": {
    "prefix": "apply.int=>_1",
    "body": ["x = int(3.5)", "print(x)"],
    "description": "An example for using int"
  },
  "apply.int=>_2": {
    "prefix": "apply.int=>_2",
    "body": ["x = int('12')", "print(x)"],
    "description": "An example for using int"
  },
  "apply.int=>_3": {
    "prefix": "apply.int=>_3",
    "body": ["x = int(\"101\", 2)", "print(x)"],
    "description": "An example for using int"
  },
  "id": {
    "prefix": "id",
    "body": "id(${1:object})$0",
    "description": "Return the id of an object"
  },
  "apply.id=>": {
    "prefix": "apply.id=>",
    "body": ["class Foo:", "\tb = 5\n", "dummyFoo = Foo()", "print('id of dummyFoo =',id(dummyFoo))"],
    "description": "An example for using id"
  },
  "import": {
    "prefix": "import",
    "body": "import ${1:package/module}$0",
    "description": "Import a package or module"
  },
  "import.as": {
    "prefix": "import.as",
    "body": "import ${1:module} as ${2:newname}$0",
    "description": "shortcut for import as"
  },
  "import.numpy": {
    "prefix": "import.numpy",
    "body": "import numpy as np",
    "description": "shortcut for import numpy"
  },
  "import.matplotlib.pyplot": {
    "prefix": "import.matplotlib.pyplot",
    "body": "import matplotlib.pyplot as plt",
    "description": "shortcut for import matplotlib.pyplot"
  },
  "input with variable": {
    "prefix": "input",
    "body": "${1:ans} = input(\"${2:Please enter: }\")$0",
    "description": "retrieve user input"
  },
  "input=>": {
    "prefix": "input=>",
    "body": "input(\"${1:Please enter: }\")$0",
    "description": "retrieve user input"
  },
  "apply.input=>_1": {
    "prefix": "apply.input=>_1",
    "body": ["x = input('Enter your name:')", "print('Hello, ' + x)"],
    "description": "An example for using input"
  },
  "apply.input=>_2": {
    "prefix": "apply.input=>_2",
    "body": ["print('Enter your name:')", "x = input()", "print('Hello, ' + x)"],
    "description": "An example for using input"
  },
  "isinstance": {
    "prefix": "isinstance",
    "body": "isinstance(${1:object}, ${2:type})$0",
    "description": "Return True if a specified object is an instance of a specified object"
  },
  "apply.isinstance=>_1": {
    "prefix": "apply.isinstance=>_1",
    "body": ["x = isinstance(5, int)\n", "print(x)"],
    "description": "An example for using isinstance"
  },
  "apply.isinstance=>_2": {
    "prefix": "apply.isinstance=>_2",
    "body": ["x = isinstance('Hello', (float, int, str, list, dict, tuple))\n", "print(x)"],
    "description": "An example for using isinstance"
  },
  "apply.isinstance=>_3": {
    "prefix": "apply.isinstance=>_3",
    "body": ["class myObj:\n\tname = 'John'\n", "y = myObj()\n", "x = isinstance(y, myObj)", "print(x)"],
    "description": "An example for using isinstance"
  },
  "issubclass": {
    "prefix": "issubclass",
    "body": "issubclass(${1:object}, ${2:subclass})$0",
    "description": "Return True if a specified class is a subclass of a specified object"
  },
  "apply.issubclass=>": {
    "prefix": "apply.issubclass=>",
    "body": ["class myAge:\n\tage = 36\n", "class myObj(myAge):\n\tname = 'John'\n\tage = myAge\n\n\tx = issubclass(myObj, myAge)\n", "print(x)"],
    "description": "An example for using isinstance"
  },
  "iter": {
    "prefix": "iter",
    "body": "iter(${1:object}, ${2:subclass})$0",
    "description": "Return an iterator object"
  },
  "apply.iter=>": {
    "prefix": "apply.iter=>",
    "body": ["x = iter(['apple', 'banana', 'cherry'])", "print(next(x))", "print(next(x))", "print(next(x))"],
    "description": "An example for using iter"
  },
  "len": {
    "prefix": "len",
    "body": "len(${1:object})$0",
    "description": "Return the length of an object"
  },
  "apply.len=>_1": {
    "prefix": "apply.len=>_1",
    "body": ["mylist = ['apple', 'banana', 'cherry']", "x = len(mylist)"],
    "description": "An example for using len"
  },
  "apply.len=>_2": {
    "prefix": "apply.len=>_2",
    "body": ["mylist = 'Hello'", "x = len(mylist)"],
    "description": "An example for using len"
  },
  "list=>": {
    "prefix": "list=>",
    "body": "list(${1:iterable})$0",
    "description": "Return a list"
  },
  "apply.list=>": {
    "prefix": "apply.list=>",
    "body": ["x = list(('apple', 'banana', 'cherry'))", "print(x)"],
    "description": "An example for using list"
  },
  "locals": {
    "prefix": "locals",
    "body": "locals(${1:})$0",
    "description": "Return an updated dictionary of the current local symbol table"
  },
  "apply.locals=>_1": {
    "prefix": "apply.locals=>_1",
    "body": ["x = locals()", "print(x)"],
    "description": "An example for using locals"
  },
  "apply.locals=>_2": {
    "prefix": "apply.locals=>_2",
    "body": ["x = locals()", "print(x['__file__'])"],
    "description": "An example for using locals"
  },
  "map": {
    "prefix": "map",
    "body": "map(${1:function}, ${2:iterables})$0",
    "description": "Return the specified iterator with the specified function applied to each item"
  },
  "apply.map=>_1": {
    "prefix": "apply.map=>_1",
    "body": ["def myfunc(n):\n\treturn len(n)\n", "x = map(myfunc, ('apple', 'banana', 'cherry'))\n", "print(x)"],
    "description": "An example for using map"
  },
  "apply.map=>_2": {
    "prefix": "apply.map=>_2",
    "body": ["def myfunc(a, b):\n\treturn a + b\n", "x = map(myfunc, ('apple', 'banana', 'cherry'), ('orange', 'lemon', 'pineapple'))\n", "print(x)"],
    "description": "An example for using map"
  },
  "max": {
    "prefix": "max",
    "body": "max(${1:iterable})$0",
    "description": "Return the largest item in an iterable"
  },
  "apply.max=>_1": {
    "prefix": "apply.max=>_1",
    "body": ["x = max(5, 10)", "print(x)"],
    "description": "An example for using max"
  },
  "apply.max=>_2": {
    "prefix": "apply.max=>_2",
    "body": ["x = max('Mike', 'John', 'Vicky')", "print(x)"],
    "description": "An example for using max"
  },
  "apply.max=>_3": {
    "prefix": "apply.max=>_3",
    "body": ["a = (1, 5, 3, 9)", "x = max(a)", "print(x)"],
    "description": "An example for using max"
  },
  "memoryview=>": {
    "prefix": "memoryview=>",
    "body": "memoryview(${1:obj})$0",
    "description": "Return a memory view object"
  },
  "apply.memoryview=>": {
    "prefix": "apply.memoryview=>",
    "body": ["x = memoryview(b'Hello')", "print(x)\n", "#return the Unicode of the first character", "print(x[0])\n", "#return the Unicode of the second character", "print(x[1])"],
    "description": "An example for using memoryview"
  },
  "min": {
    "prefix": "min",
    "body": "min(${1:iterable})$0",
    "description": "Return the smallest item in an iterable"
  },
  "apply.min=>_1": {
    "prefix": "apply.min=>_1",
    "body": ["x = min(5, 10)", "print(x)"],
    "description": "An example for using min"
  },
  "apply.min=>_2": {
    "prefix": "apply.min=>_2",
    "body": ["x = min('Mike', 'John', 'Vicky')", "print(x)"],
    "description": "An example for using min"
  },
  "apply.min=>_3": {
    "prefix": "apply.min=>_3",
    "body": ["a = (1, 5, 3, 9)", "x = min(a)", "print(x)"],
    "description": "An example for using min"
  },
  "next": {
    "prefix": "next",
    "body": "next(${1:iterable}, ${2:default})$0",
    "description": "Return the next item in an iterable"
  },
  "apply.next=>_1": {
    "prefix": "apply.next=>_1",
    "body": ["mylist = iter(['apple', 'banana', 'cherry'])", "x = next(mylist)", "print(x)", "x = next(mylist)", "print(x)", "x = next(mylist)", "print(x)"],
    "description": "An example for using next"
  },
  "apply.next=>_2": {
    "prefix": "apply.next=>_2",
    "body": ["mylist = iter(['apple', 'banana', 'cherry'])", "x = next(mylist, 'orange')", "print(x)", "x = next(mylist, 'orange')", "print(x)", "x = next(mylist, 'orange')", "print(x)", "x = next(mylist, 'orange')", "print(x)"],
    "description": "An example for using next"
  },
  "object": {
    "prefix": "object",
    "body": "object(${1:})$0",
    "description": "Return a new object"
  },
  "apply.object=>": {
    "prefix": "apply.object=>",
    "body": ["x = object()", "print(dir(x))"],
    "description": "An example for using object"
  },
  "oct": {
    "prefix": "oct",
    "body": "oct(${1:number})$0",
    "description": "Converts a number into an octal"
  },
  "apply.oct=>": {
    "prefix": "apply.oct=>",
    "body": ["x = oct(12)", "print(x)"],
    "description": "An example for using oct"
  },
  "open": {
    "prefix": "open",
    "body": "open(\"${1:filename.txt}\", ${2:mode})$0",
    "description": "Opens a file and Return a file object"
  },
  "apply.open=>": {
    "prefix": "apply.open=>",
    "body": ["f = open('pyfile.txt', 'r')", "print(f.read())"],
    "description": "An example for using open"
  },
  "ord": {
    "prefix": "ord",
    "body": "ord(${1:character})$0",
    "description": "Given a string of length one, return an integer representing the Unicode code point of the character when the argument is a unicode object, or the value of the byte when the argument is an 8-bit string."
  },
  "apply.ord=>": {
    "prefix": "apply.ord=>",
    "body": ["x=ord('a')", "print(x)"],
    "description": "An example for using ord"
  },
  "pow": {
    "prefix": "pow",
    "body": "pow(${1:base}, ${2:exponent})$0",
    "description": "Return base to the power exponent"
  },
  "apply.pow=>": {
    "prefix": "apply.pow=>",
    "body": ["x=pow(2,5)", "print(x)"],
    "description": "An example for using pow"
  },
  "print.withQuotation": {
    "prefix": "print",
    "body": "print(\"${1:}\")$0",
    "description": "Code snippet for the print statement."
  },
  "print.empty": {
    "prefix": "print.empty",
    "body": "print(${1:})$0",
    "description": "Code snippet for the print statement."
  },
  "print.printLine": {
    "prefix": "print.printLine",
    "body": "print(\"${1:}\\n\")$0",
    "description": "Extra \\n for print"
  },
  "print.LinePrint": {
    "prefix": "print.LinePrint",
    "body": "print(\"\\n${1:}\")$0",
    "description": "Extra \\n in front for print"
  },
  "print.LineTabPrint": {
    "prefix": "print.LineTabPrint",
    "body": "print(\"\\n\\t${1:}\")$0",
    "description": "Extra \\n\\t in front for print"
  },
  "print.LinePrintLine": {
    "prefix": "print.LinePrintLine",
    "body": "print(\"\\n${1:}\\n\")$0",
    "description": "Extra \\n in front and back for print"
  },
  "print.TabPrint": {
    "prefix": "print.TabPrint",
    "body": "print(\"\\t${1:}\")$0",
    "description": "Extra \\t in front for print"
  },
  "print.printClean": {
    "prefix": "print.printClean",
    "body": "print(\"${1:}\", end=\"${2:}\")$0",
    "description": "Instead of default \\n keep it empty to print on same line"
  },
  "apply.print=>": {
    "prefix": "apply.print=>",
    "body": "print(object(s), separator=separator, end=end, file=file, flush=flush)",
    "description": "Prints to the standard output device"
  },
  "apply.print=>_1": {
    "prefix": "apply.print=>_1",
    "body": ["print('Hello', 'how are you?')"],
    "description": "An example for using print"
  },
  "apply.print=>_2": {
    "prefix": "apply.print=>_2",
    "body": ["x = ('apple', 'banana', 'cherry')", "print(x)"],
    "description": "An example for using print"
  },
  "apply.print=>_3": {
    "prefix": "apply.print=>_3",
    "body": ["print('Hello', 'how are you?', sep=' ---')"],
    "description": "An example for using print"
  },
  "property": {
    "prefix": "property",
    "body": "property(${1:fget=None}, ${2:fset=None}, ${3:fdel=None}, ${4:doc=None})$0",
    "description": "Gets, sets, deletes a property"
  },
  "apply.property=>": {
    "prefix": "apply.property=>",
    "body": [
      "class C:",
      "\tdef __init__(self):",
      "\t\tself._x = None",
      "\tdef getx(self):",
      "\t\treturn self._x",
      "\tdef setx(self, value):",
      "\t\tself._x = value",
      "\tdef delx(self):",
      "\t\tdel self._x",
      "\n\tx = property(getx, setx, delx, \"I'm the 'x' property.\")",
      "# If c is an instance of C, c.x will invoke the getter, ",
      "# c.x = value will invoke the setter, and del c.x the deleter."
    ],
    "description": "An example for using property"
  },
  "range": {
    "prefix": "range",
    "body": "range(${1:start}, ${2:stop}, ${3:step})$0",
    "description": "Use in for-loop, starting from 0 and increments by 1 (by default)"
  },
  "repr": {
    "prefix": "repr",
    "body": "repr(${1:object})$0",
    "description": "Return a readable version of an object"
  },
  "reversed": {
    "prefix": "reversed",
    "body": "reversed(${1:seq})$0",
    "description": "Return a reversed iterator"
  },
  "apply.reversed=>": {
    "prefix": "apply.reversed=>",
    "body": ["alph = ['a', 'b', 'c', 'd']", "ralph = reversed(alph)", "for x in ralph:", "\tprint(x)"],
    "description": "An example for using reversed"
  },
  "round": {
    "prefix": "round",
    "body": "round(${1:number[}, ${2:ndigits]})$0",
    "description": "Rounds a numbers"
  },
  "apply.round=>_1": {
    "prefix": "apply.round=>_1",
    "body": ["x = round(5.76543, 2)", "print(x)"],
    "description": "An example for using round"
  },
  "apply.round=>_2": {
    "prefix": "apply.round=>_2",
    "body": ["x = round(5.76543)", "print(x)"],
    "description": "An example for using round"
  },
  "self": {
    "prefix": "self",
    "body": "self.$0",
    "description": "Shorten snippet to reference the self property in an object."
  },
  "set=>": {
    "prefix": "set=>",
    "body": "set(${1:iterable})$0",
    "description": "Return a new set object"
  },
  "apply.set=>": {
    "prefix": "apply.set=>",
    "body": ["x = set(('apple', 'banana', 'cherry'))", "print(x)"],
    "description": "An example for using set"
  },
  "setattr": {
    "prefix": "setattr",
    "body": "setattr(${1:object}, ${2:name}, ${3:value})$0",
    "description": "Sets an attribute (property/method) of an object"
  },
  "apply.setattr=>": {
    "prefix": "apply.setattr=>",
    "body": ["class Person:", "\tname = 'John'", "\tage = 36", "\tcountry = 'Norway'", "setattr(Person, 'age', 40)", "# The age property will now have the value: 40", "x = getattr(Person, 'age')", "print(x)"],
    "description": "An example for using setattr"
  },
  "slice": {
    "prefix": "slice",
    "body": "slice(${1:start}, ${2:end}, ${3:step})$0",
    "description": "Return a slice object"
  },
  "apply.slice=>_1": {
    "prefix": "apply.slice=>_1",
    "body": ["a = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')", "x = slice(2)", "print(a[x])"],
    "description": "An example for using slice"
  },
  "apply.slice=>_2": {
    "prefix": "apply.slice=>_2",
    "body": ["a = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')", "x = slice(3, 5)", "print(a[x])"],
    "description": "An example for using slice"
  },
  "apply.slice=>_3": {
    "prefix": "apply.slice=>_3",
    "body": ["a = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')", "x = slice(0, 8, 3)", "print(a[x])"],
    "description": "An example for using slice"
  },
  "sorted": {
    "prefix": "sorted",
    "body": "sorted(${1:iterable}, ${2:key=key}, ${3:reverse=reverse})$0",
    "description": "Return a sorted list"
  },
  "apply.sorted=>_1": {
    "prefix": "apply.sorted=>_1",
    "body": ["a = ('b', 'g', 'a', 'd', 'f', 'c', 'h', 'e')", "x = sorted(a)", "print(x)"],
    "description": "An example for using sorted"
  },
  "apply.sorted=>_2": {
    "prefix": "apply.sorted=>_2",
    "body": ["a = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')", "x = sorted(a, reverse=True)", "print(x)"],
    "description": "An example for using sorted"
  },
  "apply.sorted=>_3": {
    "prefix": "apply.sorted=>_3",
    "body": ["a = ('b', 'g', 'a', 'd', 'f', 'c', 'h', 'e')", "x = sorted(a)", "print(x)"],
    "description": "An example for using sorted"
  },
  "staticmethod": {
    "prefix": "staticmethod",
    "body": "staticmethod(${1:function})$0",
    "description": "Converts a method into a static method"
  },
  "str=>": {
    "prefix": "str=>",
    "body": "str(${1:object}, ${2:encoding=encoding}, ${3:errors=errors})$0",
    "description": "Return a string object"
  },
  "apply.str=>": {
    "prefix": "apply.str=>",
    "body": ["x = str(3.5)", "print(x)"],
    "description": "An example for using str"
  },
  "sum": {
    "prefix": "sum",
    "body": "sum(${1:iterable}, ${2:start})$0",
    "description": "Sums the items of an iterator"
  },
  "apply.sum=>_1": {
    "prefix": "apply.sum=>_1",
    "body": ["a = (1, 2, 3, 4, 5)", "x = sum(a)", "print(x)"],
    "description": "An example for using sum"
  },
  "apply.sum=>_2": {
    "prefix": "apply.sum=>_2",
    "body": ["a = (1, 2, 3, 4, 5)", "x = sum(a, 7)", "print(x)"],
    "description": "An example for using sum"
  },
  "super": {
    "prefix": "super",
    "body": "super(${1:type[, object-or-type]})$0",
    "description": "Return a proxy object that delegates method calls to a parent or sibling class of type."
  },
  "tuple=>": {
    "prefix": "tuple=>",
    "body": "tuple(${1:iterable})$0",
    "description": "Return a tuple"
  },
  "apply.tuple=>": {
    "prefix": "apply.tuple=>",
    "body": ["x = tuple(('apple', 'banana', 'cherry'))", "print(x)"],
    "description": "An example for using tuple"
  },
  "type": {
    "prefix": "type",
    "body": "type(${1:object})$0",
    "description": "Return the type of an object"
  },
  "apply.type": {
    "prefix": "apply.type",
    "body": "type(object, bases, dict)",
    "description": "Return the type of an object"
  },
  "apply.type=>": {
    "prefix": "apply.type=>",
    "body": ["a = ('apple', 'banana', 'cherry')", "b = 'Hello World'", "c = 33", "print(type(a))", "print(type(b))", "print(type(c))"],
    "description": "An example for using type"
  },
  "unichr": {
    "prefix": "unichr",
    "body": "unichr(${1:integer})$0",
    "description": "Return the Unicode string of one character whose Unicode code is the integer i."
  },
  "vars": {
    "prefix": "vars",
    "body": "vars(${1:object})$0",
    "description": "Return the __dict__ property of an object"
  },
  "apply.vars=>": {
    "prefix": "apply.vars=>",
    "body": ["class Person:", "\tname = 'John'", "\tage = 36", "\tcountry = 'norway'", "x = vars(Person)"],
    "description": "An example for using vars"
  },
  "zip": {
    "prefix": "zip",
    "body": "zip(${1:iterator1, iterqator2, iterator3 ...})$0",
    "description": "Return an iterator, from two or more iterators"
  },
  "apply.zip=>_1": {
    "prefix": "apply.zip=>_1",
    "body": ["a = ('John', 'Charles', 'Mike')", "b = ('Jenny', 'Christy', 'Monica')", "x = zip(a, b)", "#use the tuple() function to display a readable version of the result:", "print(tuple(x))"],
    "description": "An example for using zip"
  },
  "apply.zip=>_2": {
    "prefix": "apply.zip=>_2",
    "body": ["a = ('John', 'Charles', 'Mike')", "b = ('Jenny', 'Christy', 'Monica', 'Vicky')", "x = zip(a, b)", "#use the tuple() function to display a readable version of the result:", "print(tuple(x))"],
    "description": "An example for using zip"
  },
  "if": {
    "prefix": "if",
    "body": "if (${1:}):\n\t#comment: ${2:}\n\t\n#END IF$0",
    "description": "if Statements"
  },
  "ifelif": {
    "prefix": "ifelif",
    "body": "if (${1:}):\n\t#comment: ${2:}\nelif (${3:}):\n\t#comment: ${4:}\n\t\n#END IF$0",
    "description": "if/elif Statements"
  },
  "ifelifelse": {
    "prefix": "ifelifelse",
    "body": "if (${1:}):\n\t#comment: ${2:}\nelif (${3:}):\n\t#comment: ${4:}\nelse:\n\t#comment: ${5:}\n\t\n#END IF$0",
    "description": "if/elif/else Statements"
  },
  "ifel": {
    "prefix": "ifelse",
    "body": "if (${1:}):\n\t#comment: ${2:}\nelse:\n\t#comment: ${3:}\n\t\n#END IF$0",
    "description": "if/else Statements"
  },
  "elif": {
    "prefix": "else",
    "body": "else:\n\t#comment: ${1:}$0",
    "description": "else Statements"
  },
  "ifshort": {
    "prefix": "ifshort",
    "body": "print('A') if a > b else print('B')",
    "description": "ifshort Statements"
  },
  "lambda": {
    "prefix": "lambda",
    "body": "lambda arguments : expression",
    "description": "A lambda function can take any number of arguments, but can only have one expression."
  },
  "for": {
    "prefix": "for",
    "body": "for ${1:value} in ${2:iterable}:\n\t#comment: ${3:}\n\t\n#END FOR$0",
    "description": "Code snippet to create a for loop structure."
  },
  "for-range(Amount)": {
    "prefix": "for(Amount)",
    "body": "for ${1:value} in range(${2:total}):\n\t#comment: ${3:}\n\t\n#END FOR$0",
    "description": "value = 0,1,2 [for value in range(3)]"
  },
  "for-range(Begin, ExclusiveEnd)": {
    "prefix": "for(Begin, End)",
    "body": "for ${1:value} in range(${2:start}, ${3:stop}):\n\t#comment: ${4:}\n\t\n#END FOR$0",
    "description": "value = 1,2 [for value in range(1, 3)]"
  },
  "for-range(Begin, ExclusiveEnd, IncrementBy)": {
    "prefix": "for(IncrementBy)",
    "body": "for ${1:value} in range(${2:start}, ${3:stop}, ${4:step}):\n\t#comment: ${5:}\n\t\n#END FOR$0",
    "description": "value = 3,2,1 [for value in range(3, 0, -1)]"
  },
  "for=>list": {
    "prefix": "for=>list",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "for x in fruits:", "\tprint(x)"],
    "description": "An example for using for"
  },
  "for=>through_a_string": {
    "prefix": "for=>through_a_string",
    "body": ["for x in 'banana':", "\tprint(x)"],
    "description": "An example for using for"
  },
  "for=>break_statement": {
    "prefix": "for=>break_statement",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "for x in fruits:\n\tprint(x)\n\tif x == 'banana':", "\tbreak"],
    "description": "An example for using for"
  },
  "for=>continue_statement": {
    "prefix": "for=>continue_statement",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "for x in fruits:\n\tprint(x)\n\tif x == 'banana':", "\tcontinue\n\tprint(x)"],
    "description": "An example for using for"
  },
  "for=>range_function_1": {
    "prefix": "for=>range_function_1",
    "body": ["for x in range(6):\n\tprint(x)"],
    "description": "An example for using for"
  },
  "for=>range_function_2": {
    "prefix": "for=>range_function_2",
    "body": ["for x in range(2, 6):\n\tprint(x)"],
    "description": "An example for using for"
  },
  "for=>range_function_3": {
    "prefix": "for=>range_function_3",
    "body": ["for x in range(2, 30, 3):\n\tprint(x)"],
    "description": "An example for using for"
  },
  "for=>for_else": {
    "prefix": "for=>for_else",
    "body": ["for x in range(2, 6):\n\tprint(x)", "else:\n\tprint('Finally finished!')"],
    "description": "An example for using for"
  },
  "for=>nested_loops": {
    "prefix": "for=>nested_loops",
    "body": ["adj = ['red', 'big', 'tasty']", "fruits = ['apple', 'banana', 'cherry']", "for x in adj:", "\tfor y in fruits:", "\t\tprint(x, y)"],
    "description": "An example for using for"
  },
  "while": {
    "prefix": "while",
    "body": "while (${1:}):\n\t#comment: ${2:}\n\t\n#END WHILE$0",
    "description": "Code snippet to create a while loop structure."
  },
  "while_else": {
    "prefix": "while_else",
    "body": "while (${1:}):\n\t#comment: ${2:}\nelse:\n\t#comment: ${3:}\n\t\n#END WHILE$0",
    "description": "while Statements"
  },
  "while=>": {
    "prefix": "while=>",
    "body": ["i = 1", "while i < 6:", "\tprint(i)", "\ti += 1"],
    "description": "while Statements"
  },
  "while=>break_statement": {
    "prefix": "while=>break_statement",
    "body": ["i = 1", "while i < 6:\n\tprint(i)", "\tif i == 3:", "\t\tbreak", "\ti += 1"],
    "description": "while Statements"
  },
  "while=>continue_statement": {
    "prefix": "while=>continue_statement",
    "body": ["i = 1", "while i < 6:", "\ti += 1", "\tprint(i)", "\tif i == 3:", "\t\tcontinue", "\tprint(i)"],
    "description": "while Statements"
  },
  "function": {
    "prefix": "function=>",
    "body": "def ${1:name}(${2:args}):\n\t#comment: ${3:}\n\t\n#END DEF$0",
    "description": "Defining Function"
  },
  "def": {
    "prefix": "def=>",
    "body": "def ${1:name}(${2:args}):\n\t#comment: ${3:}\n\t\n#END DEF$0",
    "description": "Defining Function"
  },
  "def=>with_default_value": {
    "prefix": "def=>with_default_value",
    "body": "def ${1:name}(${2:#lastName=\"john\"}):\n\t#comment: ${3:}\n\t\n#END DEF$0",
    "description": "Defining Function wqith default values"
  },
  "capitalize": {
    "prefix": ".capitalize",
    "body": ".capitalize()",
    "description": "Converts the first character to upper case"
  },
  "string.capitalize=>_1": {
    "prefix": "string.capitalize=>_1",
    "body": ["txt = hello, and welcome to my world.\n", "x = txt.capitalize()\n", "print (x)"],
    "description": "An example for using capitalize"
  },
  "string.capitalize=>_2": {
    "prefix": "string.capitalize=>_2",
    "body": ["txt = '36 is my age.'\n", "x = txt.capitalize()\n", "print (x)"],
    "description": "An example for using capitalize"
  },
  "casefold": {
    "prefix": ".casefold",
    "body": ".casefold()",
    "description": "Converts string into lower case"
  },
  "string.casefold=>": {
    "prefix": "string.casefold=>",
    "body": ["txt = 'Hello, And Welcome To My World!'\n", "x = txt.casefold()\n", "print(x)"],
    "description": "An example for using casefold"
  },
  "center": {
    "prefix": ".center",
    "body": "center(${1:length}, ${2:character})$0",
    "description": "Return a centered string"
  },
  "string.center=>_1": {
    "prefix": "string.center=>_1",
    "body": ["txt = 'banana'\n", "x = txt.center(20)\n", "print(x)"],
    "description": "An example for using center"
  },
  "string.center=>_2": {
    "prefix": "string.center=>_2",
    "body": ["txt = 'banana'\n", "x = txt.center(20,'O')\n", "print(x)"],
    "description": "An example for using center"
  },
  "string.count": {
    "prefix": ".count",
    "body": ".count(${1:string})$0",
    "description": "Return the number of times a specified value occurs in a string"
  },
  "string.count=>_1": {
    "prefix": "string.count=>_1",
    "body": ["txt = 'I love apples, apple are my favorite fruit'\n", "x = txt.count('apple')\n", "print(x)"],
    "description": "An example for using count"
  },
  "string.count=>_2": {
    "prefix": "string.count=>_2",
    "body": ["txt = 'I love apples, apple are my favorite fruit'\n", "x = txt.count('apple', 10, 24)\n", "print(x)"],
    "description": "An example for using count"
  },
  "encode": {
    "prefix": ".encode",
    "body": ".encode()",
    "description": "Return an encoded version of the string"
  },
  "string.encode=>": {
    "prefix": "string.encode=>",
    "body": ["txt = 'My name is MEÃ˜W'\n", "x = txt.encode()\n", "print()"],
    "description": "An example for using encode"
  },
  "string.encode=>": {
    "prefix": "string.encode=>",
    "body": [
      "txt = 'My name is MEÃ˜W'",
      "",
      "print(txt.encode(encoding='ascii',errors='backslashreplace')",
      "print(txt.encode(encoding='ascii',errors='ignore')",
      "print(txt.encode(encoding='ascii',errors='namereplace')",
      "print(txt.encode(encoding='ascii',errors='replace')",
      "print(txt.encode(encoding='ascii',errors='xmlcharrefreplace')",
      "print(txt.encode(encoding='ascii',errors='strict')"
    ],
    "description": "An example for using encode"
  },
  "endswith": {
    "prefix": ".endswith",
    "body": ".endswith(${1:string})$0",
    "description": "Return true if the string ends with the specified value"
  },
  "string.endswith=>_1": {
    "prefix": "string.endswith=>_1",
    "body": ["txt = 'Hello, And Welcome To My World!'\n", "x = txt.endswith('.')\n", "print(x)"],
    "description": "An example for using endswith"
  },
  "string.endswith=>_2": {
    "prefix": "string.endswith=>_2",
    "body": ["txt = 'Hello, And Welcome To My World!'\n", "x = txt.endswith('my world.', 5, 11)\n", "print(x)"],
    "description": "An example for using endswith"
  },
  "expandtabs": {
    "prefix": ".expandtabs",
    "body": ".expandtabs(${1:number})$0",
    "description": "Sets the tab size of the string"
  },
  "string.expandtabs=>_1": {
    "prefix": "string.expandtabs=>_1",
    "body": ["txt = 'H\te\tl\tl\to'\n", "x = txt.expandtabs(2)\n", "print(x)"],
    "description": "An example for using expandtabs"
  },
  "string.expandtabs=>_2": {
    "prefix": "string.expandtabs=>_2",
    "body": ["txt = 'H\te\tl\tl\to'\n", "print(txt)", "print(txt.expandtabs())", "print(txt.expandtabs(2))", "print(txt.expandtabs(4))", "print(txt.expandtabs(10))"],
    "description": "An example for using expandtabs"
  },
  "find": {
    "prefix": ".find",
    "body": ".find(${1:string})$0",
    "description": "Searches the string for a specified value and Return the position of where it was found"
  },
  "string.find=>_1": {
    "prefix": "string.find=>_1",
    "body": ["txt = 'Hello, welcome to my world.'\n", "x = txt.find('welcome')\n", "print(x)"],
    "description": "An example for using find"
  },
  "string.find=>_2": {
    "prefix": "string.find=>_2",
    "body": ["txt = 'Hello, And Welcome To My World!'\n", "x = txt.find('e')\n", "print(x)"],
    "description": "An example for using find"
  },
  "string.find=>_3": {
    "prefix": "string.find=>_3",
    "body": ["txt = 'Hello, And Welcome To My World!'\n", "x = txt.find('e', 5, 10)\n", "print(x)"],
    "description": "An example for using find"
  },
  "string.find=>_4": {
    "prefix": "string.find=>_4",
    "body": ["txt = 'Hello, And Welcome To My World!'\n", "print(txt.find('q'))", "print(txt.index('q'))"],
    "description": "An example for using find"
  },
  "format": {
    "prefix": ".format",
    "body": ".format(${1:})$0",
    "description": "Formats specified values in a string"
  },
  "string.format=>": {
    "prefix": "string.format=>",
    "body": [
      "# default arguments",
      "print('Hello {}, your balance is {}.'.format('Adam', 230.2346))",
      "",
      "# positional arguments",
      "print('Hello {0}, your balance is {1}.'.format('Adam', 230.2346))",
      "",
      "# keyword arguments",
      "print('Hello {name}, your balance is {blc}.'.format(name='Adam', blc=230.2346))",
      "",
      "# mixed arguments",
      "print('Hello {0}, your balance is {blc}.'.format('Adam', blc=230.2346))"
    ],
    "description": "An example for using format"
  },
  "format_map": {
    "prefix": ".format_map",
    "body": ".format_map(${1:})$0",
    "description": "Formats specified values in a string"
  },
  "string.format_map=>": {
    "prefix": "string.format_map=>",
    "body": ["point = {'x':4,'y':-5}", "print('{x} {y}'.format_map(point))\n", "point = {'x':4,'y':-5, 'z': 0}", "print('{x} {y} {z}'.format_map(point))"],
    "description": "An example for using format_map"
  },
  "index": {
    "prefix": ".index",
    "body": ".index(${1:string})$0",
    "description": "Searches the string for a specified value and Return the position of where it was found"
  },
  "string.index=>_1": {
    "prefix": "string.index=>_1",
    "body": ["txt = 'Hello, welcome to my world.'\n", "x = txt.index('welcome')\n", "print(x)"],
    "description": "An example for using index"
  },
  "string.index=>_2": {
    "prefix": "string.index=>_2",
    "body": ["txt = 'Hello, And Welcome To My World!'\n", "x = txt.index('e')\n", "print(x)"],
    "description": "An example for using index"
  },
  "string.index=>_3": {
    "prefix": "string.index=>_3",
    "body": ["txt = 'Hello, And Welcome To My World!'\n", "x = txt.index('e', 5, 10)\n", "print(x)"],
    "description": "An example for using index"
  },
  "string.index=>_4": {
    "prefix": "string.index=>_4",
    "body": ["txt = 'Hello, And Welcome To My World!'\n", "print(txt.find('q'))", "print(txt.index('q'))"],
    "description": "An example for using index"
  },
  "isalnum": {
    "prefix": ".isalnum",
    "body": ".isalnum()",
    "description": "Return True if all characters in the string are alphanumeric"
  },
  "string.isalnum=>": {
    "prefix": "string.isalnum=>",
    "body": ["txt = 'Company12'", "x = txt.isalnum()", "print(x)"],
    "description": "An example for using isalnum"
  },
  "string.isalnum=>": {
    "prefix": "string.isalnum=>",
    "body": ["txt = 'Company 12'", "x = txt.isalnum()", "print(x)"],
    "description": "An example for using isalnum"
  },
  "isalpha": {
    "prefix": ".isalpha",
    "body": ".isalpha()",
    "description": "Return True if all characters in the string are in the alphabet"
  },
  "string.isalpha=>": {
    "prefix": "string.isalpha=>",
    "body": ["txt = 'Company10'", "x = txt.isalpha()", "print(x)"],
    "description": "An example for using isalpha"
  },
  "isdecimal": {
    "prefix": ".isdecimal",
    "body": ".isdecimal()",
    "description": "Return True if all characters in the string are decimals"
  },
  "string.isdecimal=>": {
    "prefix": "string.isdecimal=>",
    "body": ["txt = '\u0033' #unicode for 3", "x = txt.isdecimal()", "print(x)"],
    "description": "An example for using isdecimal"
  },
  "string.isdecimal=>": {
    "prefix": "string.isdecimal=>",
    "body": ["a = '\u0030' #unicode for 0", "b = '\u0047' #unicode for G", "print(a.isdecimal())", "print(b.isdecimal())"],
    "description": "An example for using isdecimal"
  },
  "isdigit": {
    "prefix": ".isdigit",
    "body": ".isdigit()",
    "description": "Return True if all characters in the string are digits"
  },
  "string.isdigit=>": {
    "prefix": "string.isdigit=>",
    "body": ["txt = '50800'", "x = txt.isdigit()", "print(x)"],
    "description": "An example for using isdigit"
  },
  "string.isdigit=>": {
    "prefix": "string.isdigit=>",
    "body": ["a = '\u0030' #unicode for 0", "b = '\u00B2' #unicode for Â²", "print(a.isdigit())", "print(b.isdigit())"],
    "description": "An example for using isdigit"
  },
  "isidentifier": {
    "prefix": ".isidentifier",
    "body": ".isidentifier()",
    "description": "Return True if the string is an identifier"
  },
  "string.isidentifier=>": {
    "prefix": "string.isidentifier=>",
    "body": ["txt = 'py'", "x = txt.isidentifier()", "print(x)"],
    "description": "An example for using isidentifier"
  },
  "string.isidentifier=>": {
    "prefix": "string.isidentifier=>",
    "body": ["a = 'MyFolder'", "b = 'py002'", "c = '2bring'", "d = 'my py'", "print(a.isidentifier())", "print(b.isidentifier())", "print(c.isidentifier())", "print(d.isidentifier())"],
    "description": "An example for using isidentifier"
  },
  "islower": {
    "prefix": ".islower",
    "body": ".islower()",
    "description": "Return True if all characters in the string are lower case"
  },
  "string.islower=>": {
    "prefix": "string.islower=>",
    "body": ["txt = 'hello world!'", "x = txt.islower()", "print(x)"],
    "description": "An example for using islower"
  },
  "string.islower=>": {
    "prefix": "string.islower=>",
    "body": ["a = 'Hello world!'", "b = 'hello 123'", "c = 'mynameisPeter'", "print(a.islower())", "print(b.islower())", "print(c.islower())"],
    "description": "An example for using islower"
  },
  "isnumeric": {
    "prefix": ".isnumeric",
    "body": ".isnumeric()",
    "description": "Return True if all characters in the string are numeric"
  },
  "string.isnumeric=>": {
    "prefix": "string.isnumeric=>",
    "body": ["txt = '565543'", "x = txt.isnumeric()", "print(x)"],
    "description": "An example for using isnumeric"
  },
  "string.isnumeric=>": {
    "prefix": "string.isnumeric=>",
    "body": ["a = '\u0030' #unicode for 0", "b = '\u00B2' #unicode for &sup2;", "c = '10km2'", "print(a.isnumeric())", "print(b.isnumeric())", "print(c.isnumeric())"],
    "description": "An example for using isnumeric"
  },
  "isprintable": {
    "prefix": ".isprintable",
    "body": ".isprintable()",
    "description": "Return True if all characters in the string are printable"
  },
  "string.isprintable=>": {
    "prefix": "string.isprintable=>",
    "body": ["txt = 'Hello! Are you #1?'", "x = txt.isprintable()", "print(x)"],
    "description": "An example for using isprintable"
  },
  "string.isprintable=>": {
    "prefix": "string.isprintable=>",
    "body": ["txt = 'Hello!\nAre you #1?'", "x = txt.isprintable()", "print(x)"],
    "description": "An example for using isprintable"
  },
  "isspace": {
    "prefix": ".isspace",
    "body": ".isspace()",
    "description": "Return True if all characters in the string are whitespaces"
  },
  "string.isspace=>": {
    "prefix": "string.isspace=>",
    "body": ["txt = '   '", "x = txt.isspace()", "print(x)"],
    "description": "An example for using isspace"
  },
  "string.isspace=>": {
    "prefix": "string.isspace=>",
    "body": ["txt = '   s   '", "x = txt.isspace()", "print(x)"],
    "description": "An example for using isspace"
  },
  "istitle": {
    "prefix": ".istitle",
    "body": ".istitle()",
    "description": "Return True if the string follows the rules of a title"
  },
  "string.istitle=>": {
    "prefix": "string.istitle=>",
    "body": ["txt = 'Hello, And Welcome To My World!'", "x = txt.istitle()", "print(x)"],
    "description": "An example for using istitle"
  },
  "string.istitle=>": {
    "prefix": "string.istitle=>",
    "body": ["a = 'HELLO, AND WELCOME TO MY WORLD'", "b = 'Hello'", "c = '22 Names'", "d = 'This Is %'!?'", "print(a.istitle())", "print(b.istitle())", "print(c.istitle())", "print(d.istitle())"],
    "description": "An example for using istitle"
  },
  "isupper": {
    "prefix": ".isupper",
    "body": ".isupper()",
    "description": "Return True if all characters in the string are upper case"
  },
  "string.isupper=>": {
    "prefix": "string.isupper=>",
    "body": ["txt = 'THIS IS NOW!'", "x = txt.isupper()", "print(x)"],
    "description": "An example for using isupper"
  },
  "string.isupper=>": {
    "prefix": "string.isupper=>",
    "body": ["a = 'Hello World!'", "b = 'hello 123'", "c = 'MY NAME IS PETER'", "print(a.isupper())", "print(b.isupper())", "print(c.isupper())"],
    "description": "An example for using isupper"
  },
  "join": {
    "prefix": ".join",
    "body": ".join(${1:iterable})$0",
    "description": "Joins the elements of an iterable to the end of the string"
  },
  "string.join=>": {
    "prefix": "string.join=>",
    "body": ["myTuple = ('John', 'Peter', 'Vicky')", "x = '#'.join(myTuple)", "print(x)"],
    "description": "An example for using join"
  },
  "string.join=>": {
    "prefix": "string.join=>",
    "body": ["myDict = {'name': 'John', 'country': 'Norway'}", "mySeparator = 'TEST'", "x = mySeparator.join(myDict)", "print(x)"],
    "description": "An example for using join"
  },
  "ljust": {
    "prefix": ".ljust",
    "body": ".ljust(${1:number})$0",
    "description": "Return a left justified version of the string"
  },
  "string.ljust=>": {
    "prefix": "string.ljust=>",
    "body": ["txt = 'banana'", "x = txt.ljust(20)", "print(x, 'is my favorite fruit.')"],
    "description": "An example for using ljust"
  },
  "string.ljust=>": {
    "prefix": "string.ljust=>",
    "body": ["txt = 'banana'", "x = txt.ljust(20, 'O')", "print(x)"],
    "description": "An example for using ljust"
  },
  "lower": {
    "prefix": ".lower",
    "body": ".lower()",
    "description": "Converts a string into lower case"
  },
  "string.lower=>": {
    "prefix": "string.lower=>",
    "body": ["txt = 'Hello my FRIENDS'", "x = txt.lower()", "print(x)"],
    "description": "An example for using lower"
  },
  "lstrip": {
    "prefix": ".lstrip",
    "body": ".lstrip()",
    "description": "Return a left trim version of the string"
  },
  "string.lstrip=>": {
    "prefix": "string.lstrip=>",
    "body": ["txt = '     banana     '", "x = txt.lstrip()", "print('of all fruits', x, 'is my favorite')"],
    "description": "An example for using lstrip"
  },
  "string.lstrip=>": {
    "prefix": "string.lstrip=>",
    "body": ["txt = ',,,,,ssaaww.....banana'", "x = txt.lstrip(',.asw')", "print(x)"],
    "description": "An example for using lstrip"
  },
  "maketrans": {
    "prefix": ".maketrans",
    "body": ".maketrans(${1:})$0",
    "description": "Return a translation table to be used in translations"
  },
  "string.maketrans=>": {
    "prefix": "string.maketrans=>",
    "body": ["# example dictionary", "dict = {'a': '123', 'b': '456', 'c': '789'}", "string = 'abc'", "print(string.maketrans(dict))"],
    "description": "An example for using maketrans"
  },
  "string.maketrans=>": {
    "prefix": "string.maketrans=>",
    "body": ["# example dictionary", "dict = {97: '123', 98: '456', 99: '789'}", "string = 'abc'", "print(string.maketrans(dict))"],
    "description": "An example for using maketrans"
  },
  "partition": {
    "prefix": ".partition",
    "body": ".partition(${1:string})$0",
    "description": "Return a tuple where the string is parted into three parts"
  },
  "string.partition=>": {
    "prefix": "string.partition=>",
    "body": ["txt = 'I could eat bananas all day'", "x = txt.partition('bananas')", "print(x)"],
    "description": "An example for using partition"
  },
  "string.partition=>": {
    "prefix": "string.partition=>",
    "body": ["txt = 'I could eat bananas all day'", "x = txt.partition('apples')", "print(x)"],
    "description": "An example for using partition"
  },
  "replace": {
    "prefix": ".replace",
    "body": ".replace(${1:old}, ${2:new})$0",
    "description": "Return a string where a specified value is replaced with a specified value"
  },
  "string.replace=>": {
    "prefix": "string.replace=>",
    "body": ["txt 'I like bananas'", "x = txt.replace('bananas', 'apples')", "print(x)"],
    "description": "An example for using replace"
  },
  "string.replace=>": {
    "prefix": "string.replace=>",
    "body": ["txt = 'one one was a race horse, two two was one too.'", "x = txt.replace('one', 'three')", "print(x)"],
    "description": "An example for using replace"
  },
  "string.replace=>": {
    "prefix": "string.replace=>",
    "body": ["txt = 'one one was a race horse, two two was one too.'", "x = txt.replace('one', 'three', 2)", "print(x)"],
    "description": "An example for using replace"
  },
  "rfind": {
    "prefix": ".rfind",
    "body": ".rfind(${1:string})$0",
    "description": "Searches the string for a specified value and Return the last position of where it was found"
  },
  "string.rfind=>": {
    "prefix": "string.rfind=>",
    "body": ["txt = 'Mi casa, su casa.'", "x = txt.rfind('casa')", "print(x)"],
    "description": "An example for using rfind"
  },
  "string.rfind=>": {
    "prefix": "string.rfind=>",
    "body": ["txt = 'Hello, welcome to my world.'", "x = txt.rfind('e')", "print(x)"],
    "description": "An example for using rfind"
  },
  "string.rfind=>": {
    "prefix": "string.rfind=>",
    "body": ["txt = 'Hello, welcome to my world.'", "x = txt.rfind('e', 5, 10)", "print(x)"],
    "description": "An example for using rfind"
  },
  "string.rfind=>": {
    "prefix": "string.rfind=>",
    "body": ["txt = 'Hello, welcome to my world.'", "print(txt.rfind('q'))", "print(txt.rindex('q'))"],
    "description": "An example for using rfind"
  },
  "rindex": {
    "prefix": ".rindex",
    "body": ".rindex(${1:string})$0",
    "description": "Searches the string for a specified value and Return the last position of where it was found"
  },
  "string.rindex=>": {
    "prefix": "string.rindex=>",
    "body": ["txt = 'Mi casa, su casa.'", "x = txt.rindex('casa')", "print(x)"],
    "description": "An example for using rindex"
  },
  "string.rindex=>": {
    "prefix": "string.rindex=>",
    "body": ["txt = 'Hello, welcome to my world.'", "x = txt.rindex('e')", "print(x)"],
    "description": "An example for using rindex"
  },
  "string.rindex=>": {
    "prefix": "string.rindex=>",
    "body": ["txt = 'Hello, welcome to my world.'", "x = txt.rindex('e', 5, 10)", "print(x)"],
    "description": "An example for using rindex"
  },
  "string.rindex=>": {
    "prefix": "string.rindex=>",
    "body": ["txt = 'Hello, welcome to my world.'", "print(txt.rfind('q'))", "print(txt.rindex('q'))"],
    "description": "An example for using rindex"
  },
  "rjust": {
    "prefix": ".rjust",
    "body": ".rjust(${1:number})$0",
    "description": "Return a right justified version of the string"
  },
  "rpartition": {
    "prefix": ".rpartition",
    "body": ".rpartition(${1:string})$0",
    "description": "Return a tuple where the string is parted into three parts"
  },
  "string.rpartition=>": {
    "prefix": "string.rpartition=>",
    "body": ["txt = 'I could eat bananas all day, bananas are my favorite fruit'", "x = txt.rpartition('bananas')", "print(x)"],
    "description": "An example for using rpartition"
  },
  "string.rpartition=>": {
    "prefix": "string.rpartition=>",
    "body": ["txt = 'I could eat bananas all day, bananas are my favorite fruit'", "x = txt.rpartition('apples')", "print(x)"],
    "description": "An example for using rpartition"
  },
  "rsplit": {
    "prefix": ".rsplit",
    "body": "rsplit(${1:separator}, ${2:maxsplit})$0",
    "description": "Return a right trim version of the string"
  },
  "string.rsplit=>": {
    "prefix": "string.rsplit=>",
    "body": ["txt = 'apple, banana, cherry'", "x = txt.rsplit(', ')", "print(x)"],
    "description": "An example for using rsplit"
  },
  "string.rsplit=>": {
    "prefix": "string.rsplit=>",
    "body": ["txt = 'apple, banana, cherry'", "# setting the max parameter to 1, will return a list with 2 elements!", "x = txt.rsplit(', ', 1)", "print(x)"],
    "description": "An example for using rsplit"
  },
  "string.rsplit=>": {
    "prefix": "string.rsplit=>",
    "body": ["txt = 'banana,,,,,ssaaww.....'", "x = txt.rstrip(',.asw')", "print(x)"],
    "description": "An example for using rsplit"
  },
  "split": {
    "prefix": ".split",
    "body": "split(${1:separator}, ${2:maxsplit})$0",
    "description": "Splits the string at the specified separator, and Return a list"
  },
  "string.split=>": {
    "prefix": "string.split=>",
    "body": ["txt = 'welcome to the jungle'", "x = txt.split()", "print(x)"],
    "description": "An example for using split"
  },
  "string.split=>": {
    "prefix": "string.split=>",
    "body": ["txt = 'hello, my name is Peter, I am 26 years old'", "x = txt.split(', ')", "print(x)"],
    "description": "An example for using split"
  },
  "string.split=>": {
    "prefix": "string.split=>",
    "body": ["txt = 'apple#banana#cherry#orange'", "x = txt.split('#')", "print(x)"],
    "description": "An example for using split"
  },
  "string.split=>": {
    "prefix": "string.split=>",
    "body": ["txt = 'apple#banana#cherry#orange'", "# setting the max parameter to 1, will return a list with 2 elements!", "x = txt.split('#', 1)", "print(x)"],
    "description": "An example for using split"
  },
  "splitlines": {
    "prefix": ".splitlines",
    "body": ".splitlines()",
    "description": "Splits the string at line breaks and Return a list"
  },
  "string.splitlines=>": {
    "prefix": "string.splitlines=>",
    "body": ["txt = 'Thank you for the music\nWelcome to the jungle'", "x = txt.splitlines()", "print(x)"],
    "description": "An example for using splitlines"
  },
  "string.splitlines=>": {
    "prefix": "string.splitlines=>",
    "body": ["txt = 'Thank you for the music\nWelcome to the jungle'", "x = txt.splitlines(True)", "print(x)"],
    "description": "An example for using splitlines"
  },
  "startswith": {
    "prefix": ".startswith",
    "body": ".startswith(${1:string})$0",
    "description": "Return true if the string starts with the specified value"
  },
  "string.startswith=>": {
    "prefix": "string.startswith=>",
    "body": ["txt = 'Hello, welcome to my world.'", "x = txt.startswith('Hello')", "print(x)"],
    "description": "An example for using startswith"
  },
  "string.startswith=>": {
    "prefix": "string.startswith=>",
    "body": ["txt = 'Hello, welcome to my world.'", "x = txt.startswith('wel', 7, 20)", "print(x)"],
    "description": "An example for using startswith"
  },
  "swapcase": {
    "prefix": ".swapcase",
    "body": ".swapcase()",
    "description": "Swaps cases, lower case becomes upper case and vice versa"
  },
  "string.swapcase=>": {
    "prefix": "string.swapcase=>",
    "body": ["txt = 'Hello My Name Is PETER'", "x = txt.swapcase()", "print(x)"],
    "description": "An example for using swapcase"
  },
  "title": {
    "prefix": ".title",
    "body": ".title()",
    "description": "Converts the first character of each word to upper case"
  },
  "string.title=>": {
    "prefix": "string.title=>",
    "body": ["txt = 'Welcome to my world'", "x = txt.title()", "print(x)"],
    "description": "An example for using title"
  },
  "string.title=>": {
    "prefix": "string.title=>",
    "body": ["txt = 'Welcome to my 2nd world'", "x = txt.title()", "print(x)"],
    "description": "An example for using title"
  },
  "string.title=>": {
    "prefix": "string.title=>",
    "body": ["txt = 'hello b2b2b2 and 3g3g3g'", "x = txt.title()", "print(x)"],
    "description": "An example for using title"
  },
  "translate": {
    "prefix": ".translate",
    "body": ".translate(${1:translation})$0",
    "description": "Return a translated string"
  },
  "string.translate=>": {
    "prefix": "string.translate=>",
    "body": [
      "# translation table - a dictionary",
      "translation = {97: None, 98: None, 99: 105}",
      "",
      "string = 'abcdef'",
      "print('Original string:', string)",
      "",
      "# translate string",
      "print('Translated string:', string.translate(translation))"
    ],
    "description": "An example for using translate"
  },
  "upper": {
    "prefix": ".upper",
    "body": ".upper()",
    "description": "Converts a string into upper case"
  },
  "string.upper=>": {
    "prefix": "string.upper=>",
    "body": ["txt = 'Hello my friends'", "x = txt.upper()", "print(x)"],
    "description": "An example for using upper"
  },
  "zfill": {
    "prefix": ".zfill",
    "body": ".zfill(${1:number})$0",
    "description": "Fills the string with a specified number of 0 values at the beginning"
  },
  "string.zfill=>": {
    "prefix": "string.zfill=>",
    "body": ["txt = '50'", "x = txt.zfill(10)", "print(x)"],
    "description": "An example for using zfill"
  },
  "append": {
    "prefix": ".append - list",
    "body": ".append(${1:item})$0",
    "description": "Adds an element at the end of the list"
  },
  "list.append=>": {
    "prefix": "list.append=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "fruits.append('orange')", "print(fruits)"],
    "description": "An example for using append"
  },
  "list.append=>": {
    "prefix": "list.append=>",
    "body": ["a = ['apple', 'banana', 'cherry']", "b = ['Ford', 'BMW', 'Volvo']", "a.append(b)", "print(a)"],
    "description": "An example for using append"
  },
  "clear": {
    "prefix": ".clear - list",
    "body": ".clear()",
    "description": "Removes all the elements from the list"
  },
  "list.clear=>": {
    "prefix": "list.clear=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "fruits.clear()", "print(fruits)"],
    "description": "An example for using clear"
  },
  "copy": {
    "prefix": ".copy - list",
    "body": ".copy()",
    "description": "Return a copy of the list"
  },
  "list.copy=>": {
    "prefix": "list.copy=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "x = fruits.copy()", "print(x)"],
    "description": "An example for using copy"
  },
  "count": {
    "prefix": ".count - list",
    "body": ".count()",
    "description": "Return the number of elements with the specified value"
  },
  "list.count=>": {
    "prefix": "list.count=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "x = fruits.count('cherry')", "print(x)"],
    "description": "An example for using count"
  },
  "list.count=>": {
    "prefix": "list.count=>",
    "body": ["fruits = [1, 4, 2, 9, 7, 8, 9, 3, 1]", "x = fruits.count(9)", "print(x)"],
    "description": "An example for using count"
  },
  "extend": {
    "prefix": ".extend - list",
    "body": ".extend(${1:iterable})$0",
    "description": "Add the elements of a list (or any iterable), to the end of the current list"
  },
  "list.extend=>": {
    "prefix": "list.extend=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "points = (1, 4, 5, 9)", "fruits.extend(points)", "print(fruits)"],
    "description": "An example for using extend"
  },
  "index": {
    "prefix": ".index - list",
    "body": ".index(${1:element})$0",
    "description": "Return the index of the first element with the specified value"
  },
  "list.index=>": {
    "prefix": "list.index=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "x = fruits.index('cherry')", "print(x)"],
    "description": "An example for using index"
  },
  "list.index=>": {
    "prefix": "list.index=>",
    "body": ["fruits = [4, 55, 64, 32, 16, 32]", "x = fruits.index(32)", "print(x)"],
    "description": "An example for using index"
  },
  "insert": {
    "prefix": ".insert - list",
    "body": ".insert(${1:element})$0",
    "description": "Adds an element at the specified position"
  },
  "list.insert=>": {
    "prefix": "list.insert=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "x = fruits.insert(1, 'orange')", "print(x)"],
    "description": "An example for using insert"
  },
  "pop": {
    "prefix": ".pop - list",
    "body": ".pop()",
    "description": "Removes the element at the specified position"
  },
  "list.pop=>": {
    "prefix": "list.pop=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "fruits.pop(1)", "print(fruits)"],
    "description": "An example for using pop"
  },
  "remove": {
    "prefix": ".remove - list",
    "body": ".remove(${1:element})$0",
    "description": "Removes the first item with the specified value"
  },
  "list.remove=>": {
    "prefix": "list.remove=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "fruits.remove('banana')", "print(fruits)"],
    "description": "An example for using remove"
  },
  "reverse": {
    "prefix": ".reverse - list",
    "body": ".reverse()",
    "description": "Reverses the order of the list"
  },
  "list.reverse=>": {
    "prefix": "list.reverse=>",
    "body": ["fruits = ['apple', 'banana', 'cherry']", "fruits.reverse()", "print(fruits)"],
    "description": "An example for using reverse"
  },
  "sort": {
    "prefix": ".sort - list",
    "body": ".sort()",
    "description": "Sorts the list"
  },
  "list.sort=>": {
    "prefix": "list.sort=>",
    "body": ["cars = ['Ford', 'BMW', 'Volvo']", "cars.sort()", "print(cars)"],
    "description": "An example for using sort"
  },
  "list.sort=>": {
    "prefix": "list.sort=>",
    "body": ["cars = ['Ford', 'BMW', 'Volvo']", "cars.sort(reverse=True)", "print(cars)"],
    "description": "An example for using sort"
  },
  "list.sort=>": {
    "prefix": "list.sort=>",
    "body": ["# A function that Return the length of the value:", "def myFunc(e):", "\treturn len(e)", "cars = ['Ford', 'Mitsubishi', 'BMW', 'VW']", "cars.sort(key=myFunc)", "print(cars)"],
    "description": "An example for using sort"
  },
  "list.sort=>": {
    "prefix": "list.sort=>",
    "body": ["# A function that Return the length of the value:", "def myFunc(e):", "\treturn len(e)", "cars = ['Ford', 'Mitsubishi', 'BMW', 'VW']", "cars.sort(reverse=True, key=myFunc)", "print(cars)"],
    "description": "An example for using sort"
  },
  "comprehensions": {
    "prefix": "comp=> - list",
    "body": "[ expression for item in list if conditional ]",
    "description": "List Comprehensions"
  },
  "list.comp=>_1": {
    "prefix": "list.comp=>_1",
    "body": ["x = [i for i in range(10)]", "print(x)"],
    "description": "An example for using list comprehension"
  },
  "list.comp=>_2": {
    "prefix": "list.comp=>_2",
    "body": ["x = [x**2 for x in range(10)]", "print(x)"],
    "description": "An example for using list comprehension"
  },
  "list.comp=>_3": {
    "prefix": "list.comp=>_3",
    "body": ["list1 = [3,4,5]", "multiplied = [item*3 for item in list1]", "print(multiplied)"],
    "description": "An example for using list comprehension"
  },
  "list.comp=>_4": {
    "prefix": "list.comp=>_4",
    "body": ["listOfWords = ['this','is','a','list','of','words']", "items = [ word[0] for word in listOfWords ]", "print(items)"],
    "description": "An example for using list comprehension"
  },
  "list.comp=>_5": {
    "prefix": "list.comp=>_5",
    "body": ["x = [double(x) for x in range(10) if x%2==0]", "print(x)"],
    "description": "An example for using list comprehension"
  },
  "clear": {
    "prefix": ".clear - dictionary",
    "body": ".clear()",
    "description": "Removes all the elements from the dictionary"
  },
  "dictionary.clear=>": {
    "prefix": "dictionary.clear=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "car.clear()", "print(car)"],
    "description": "An example for using clear"
  },
  "copy": {
    "prefix": ".copy - dictionary",
    "body": ".copy()",
    "description": "Return a copy of the dictionary"
  },
  "dictionary.copy=>": {
    "prefix": "dictionary.copy=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.copy()", "print(x)"],
    "description": "An example for using copy"
  },
  "fromkeys": {
    "prefix": ".fromkeys - dictionary",
    "body": ".fromkeys(${1:key}, ${2:value})$0",
    "description": "Return a dictionary with the specified keys and values"
  },
  "dictionary.fromkeys=>": {
    "prefix": "dictionary.fromkeys=>",
    "body": ["x = ('key1', 'key2', 'key3')", "y = 0", "thisdict = dict.fromkeys(x, y)", "print(thisdict)"],
    "description": "An example for using fromkeys"
  },
  "dictionary.fromkeys=>": {
    "prefix": "dictionary.fromkeys=>",
    "body": ["x = ('key1', 'key2', 'key3')", "thisdict = dict.fromkeys(x)", "print(thisdict)"],
    "description": "An example for using fromkeys"
  },
  "get": {
    "prefix": ".get - dictionary",
    "body": ".get(${1:key})$0",
    "description": "Return the value of the specified key"
  },
  "dictionary.get=>": {
    "prefix": "dictionary.get=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.get('model')", "print(x)"],
    "description": "An example for using get"
  },
  "dictionary.get=>": {
    "prefix": "dictionary.get=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.get('price', 15000)", "print(x)"],
    "description": "An example for using get"
  },
  "items": {
    "prefix": ".items - dictionary",
    "body": ".items()",
    "description": "Return a list containing the a tuple for each key value pair"
  },
  "dictionary.items=>": {
    "prefix": "dictionary.items=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.items()", "print(x)"],
    "description": "An example for using items"
  },
  "dictionary.items=>": {
    "prefix": "dictionary.items=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.items()", "car['year'] = 2018", "print(x)"],
    "description": "An example for using items"
  },
  "keys": {
    "prefix": ".keys - dictionary",
    "body": ".keys()",
    "description": "Return a list containing the dictionary's keys"
  },
  "dictionary.keys=>": {
    "prefix": "dictionary.keys=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.keys()", "print(x)"],
    "description": "An example for using keys"
  },
  "dictionary.keys=>": {
    "prefix": "dictionary.keys=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.keys()", "car['color'] = 'white'", "print(x)"],
    "description": "An example for using keys"
  },
  "pop": {
    "prefix": ".pop - dictionary",
    "body": ".pop(${1:key})$0",
    "description": "Removes the element with the specified key"
  },
  "dictionary.pop=>": {
    "prefix": "dictionary.pop=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "car.pop('model')", "print(car)"],
    "description": "An example for using pop"
  },
  "popitem": {
    "prefix": ".popitem - dictionary",
    "body": ".popitem()",
    "description": "Removes the last inserted key-value pai"
  },
  "dictionary.popitem=>": {
    "prefix": "dictionary.popitem=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "car.popitem()", "print(car)"],
    "description": "An example for using popitem"
  },
  "setdefault": {
    "prefix": ".setdefault - dictionary",
    "body": ".setdefault(${1:key}, ${2:value})$0",
    "description": "Return the value of the specified key. If the key does not exist: insert the key, with the specified value"
  },
  "dictionary.setdefault=>": {
    "prefix": "dictionary.setdefault=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.setdefault('model', 'Bronco')", "print(x)"],
    "description": "An example for using setdefault"
  },
  "dictionary.setdefault=>": {
    "prefix": "dictionary.setdefault=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.setdefault('color', 'white')", "print(x)"],
    "description": "An example for using setdefault"
  },
  "update": {
    "prefix": ".update - dictionary",
    "body": ".update(${1:key}, ${2:value})$0",
    "description": "Updates the dictionary with the specified key-value pairs"
  },
  "dictionary.update=>": {
    "prefix": "dictionary.update=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "car.update({'color': 'White'})", "print(car)"],
    "description": "An example for using update"
  },
  "values": {
    "prefix": ".values - dictionary",
    "body": ".values()",
    "description": "Return a list of all the values in the dictionary"
  },
  "dictionary.values=>": {
    "prefix": "dictionary.values=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.values()", "print(x)"],
    "description": "An example for using values"
  },
  "dictionary.values=>": {
    "prefix": "dictionary.values=>",
    "body": ["car = {", "\t'brand': 'Ford',", "\t'model': 'Mustang',", "\t'year': 1964", "}", "x = car.values()", "car['year'] = 2018", "print(x)"],
    "description": "An example for using values"
  },
  "count": {
    "prefix": ".count - tuple",
    "body": ".count(${1:value})$0",
    "description": "Return the number of times a specified value occurs in a tuple"
  },
  "tuple.count=>": {
    "prefix": "tuple.count=>",
    "body": ["thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)", "x = thistuple.count(5)", "print(x)"],
    "description": "An example for using count"
  },
  "index": {
    "prefix": ".index - tuple",
    "body": ".index(${1:value})$0",
    "description": "Searches the tuple for a specified value and Return the position of where it was found"
  },
  "tuple.index=>": {
    "prefix": "tuple.index=>",
    "body": ["thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)", "x = thistuple.index(8)", "print(x)"],
    "description": "An example for using index"
  },
  "add": {
    "prefix": ".add - tuple",
    "body": ".add(${1:element})$0",
    "description": "Adds an element to the set"
  },
  "sets.add=>": {
    "prefix": "sets.add=>",
    "body": ["fruits = {'apple', 'banana', 'cherry'}", "fruits.add('orange') ", "print(fruits)"],
    "description": "An example for using add"
  },
  "clear": {
    "prefix": ".clear - tuple",
    "body": ".clear()",
    "description": "Removes all the elements from the set"
  },
  "sets.clear=>": {
    "prefix": "sets.clear=>",
    "body": ["fruits = {'apple', 'banana', 'cherry'}", "fruits.clear()", "print(fruits)"],
    "description": "An example for using clear"
  },
  "copy": {
    "prefix": ".copy - set",
    "body": ".copy()",
    "description": "Return a copy of the set"
  },
  "sets.copy=>": {
    "prefix": "sets.copy=>",
    "body": ["fruits = {'apple', 'banana', 'cherry'}", "x = fruits.copy()", "print(x)"],
    "description": "An example for using copy"
  },
  "difference": {
    "prefix": ".difference - set",
    "body": ".difference(${1:set})$0",
    "description": "Return a set containing the difference between two or more sets"
  },
  "sets.difference=>_1": {
    "prefix": "sets.difference=>_1",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "z = x.difference(y)", "print(z)"],
    "description": "An example for using difference"
  },
  "sets.difference=>_2": {
    "prefix": "sets.difference=>_2",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "z = y.difference(x) ", "print(z)"],
    "description": "An example for using difference"
  },
  "difference_update": {
    "prefix": ".difference_update - set",
    "body": ".difference_update(${1:set})$0",
    "description": "Removes the items in this set that are also included in another, specified set"
  },
  "sets.difference_update=>": {
    "prefix": "sets.difference_update=>",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "x.difference_update(y)", "print(x)"],
    "description": "An example for using difference_update"
  },
  "discard": {
    "prefix": ".discard - set",
    "body": ".discard(${1:item})$0",
    "description": "Remove the specified item"
  },
  "sets.discard=>": {
    "prefix": "sets.discard=>",
    "body": ["fruits = {'apple', 'banana', 'cherry'}", "fruits.discard('banana') ", "print(fruits)"],
    "description": "An example for using discard"
  },
  "intersection": {
    "prefix": ".intersection - set",
    "body": ".intersection(${1:set})$0",
    "description": "Return a set, that is the intersection of two other sets"
  },
  "sets.intersection=>_1": {
    "prefix": "sets.intersection=>_1",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "z = x.intersection(y)", "print(z)"],
    "description": "An example for using intersection"
  },
  "sets.intersection=>_2": {
    "prefix": "sets.intersection=>_2",
    "body": ["x = {'a', 'b', 'c'}", "y = {'c', 'd', 'e'}", "z = {'f', 'g', 'c'}", "result = x.intersection(y, z)", "print(result)"],
    "description": "An example for using intersection"
  },
  "intersection_update": {
    "prefix": ".intersection_update - set",
    "body": ".intersection_update(${1:set})$0",
    "description": "Removes the items in this set that are not present in other, specified set(s)"
  },
  "sets.intersection_update=>_1": {
    "prefix": "sets.intersection_update=>_1",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "x.intersection_update(y)", "print(x)"],
    "description": "An example for using intersection_update"
  },
  "sets.intersection_update=>_2": {
    "prefix": "sets.intersection_update=>_2",
    "body": ["x = {'a', 'b', 'c'}", "y = {'c', 'd', 'e'}", "z = {'f', 'g', 'c'}", "x.intersection_update(y, z)", "print(x)"],
    "description": "An example for using intersection_update"
  },
  "isdisjoint": {
    "prefix": ".isdisjoint - set",
    "body": ".isdisjoint(${1:set})$0",
    "description": "Return whether two sets have a intersection or not"
  },
  "sets.isdisjoint=>_1": {
    "prefix": "sets.isdisjoint=>_1",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'facebook'}", "z = ", "print(z)"],
    "description": "An example for using isdisjoint"
  },
  "sets.isdisjoint=>_2": {
    "prefix": "sets.isdisjoint=>_2",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "z = x.isdisjoint(y) ", "print(z)"],
    "description": "An example for using isdisjoint"
  },
  "issubset": {
    "prefix": ".issubset - set",
    "body": ".issubset(${1:set})$0",
    "description": "Return whether another set contains this set or not"
  },
  "sets.issubset=>_1": {
    "prefix": "sets.sets.issubset=>_1",
    "body": ["x = {'a', 'b', 'c'}", "y = {'f', 'e', 'd', 'c', 'b', 'a'}", "z = x.issubset(y) ", "print(z)"],
    "description": "An example for using issubset"
  },
  "sets.issubset=>_2": {
    "prefix": "sets.issubset=>_2",
    "body": ["x = {'a', 'b', 'c'}", "y = {'f', 'e', 'd', 'c', 'b'}", "z = x.issubset(y) ", "print(z)"],
    "description": "An example for using issubset"
  },
  "issuperset": {
    "prefix": ".issuperset - set",
    "body": ".issuperset(${1:set})$0",
    "description": "Return whether this set contains another set or not"
  },
  "sets.issuperset=>_1": {
    "prefix": "sets.issuperset=>_1",
    "body": ["x = {'f', 'e', 'd', 'c', 'b', 'a'}", "y = {'a', 'b', 'c'}", "z = x.issuperset(y) ", "print(z)"],
    "description": "An example for using issuperset"
  },
  "sets.issuperset=>_2": {
    "prefix": "sets.issuperset=>_2",
    "body": ["x = {'f', 'e', 'd', 'c', 'b'}", "y = {'a', 'b', 'c'}", "z = x.issuperset(y) ", "print(z)"],
    "description": "An example for using issuperset"
  },
  "pop": {
    "prefix": ".pop - set",
    "body": ".pop()",
    "description": "Removes the specified element"
  },
  "sets.pop=>": {
    "prefix": "sets.pop=>",
    "body": ["fruits = {'apple', 'banana', 'cherry'}", "fruits.pop() ", "print(fruits)"],
    "description": "An example for using pop"
  },
  "remove": {
    "prefix": ".remove - set",
    "body": ".remove(${1:item})$0",
    "description": "Removes the specified element"
  },
  "sets.remove=>": {
    "prefix": "sets.remove=>",
    "body": ["fruits = {'apple', 'banana', 'cherry'}", "fruits.remove('banana') ", "print(fruits)"],
    "description": "An example for using remove"
  },
  "symmetric_difference": {
    "prefix": ".symmetric_difference - set",
    "body": ".symmetric_difference(${1:set})$0",
    "description": "Return a set with the symmetric differences of two sets"
  },
  "sets.symmetric_difference=>": {
    "prefix": "sets.symmetric_difference=>",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "z = x.symmetric_difference(y) ", "print(z)"],
    "description": "An example for using symmetric_difference"
  },
  "symmetric_difference_update": {
    "prefix": ".symmetric_difference_update - set",
    "body": ".symmetric_difference_update(${1:set})$0",
    "description": "inserts the symmetric differences from this set and another"
  },
  "sets.symmetric_difference_update=>": {
    "prefix": "sets.symmetric_difference_update=>",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "x.symmetric_difference_update(y) ", "print(x)"],
    "description": "An example for using symmetric_difference_update"
  },
  "union": {
    "prefix": ".union - set",
    "body": ".union(${1:set})$0",
    "description": "Return a set containing the union of sets"
  },
  "sets.union=>_1": {
    "prefix": "sets.union=>_1",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "z = x.union(y) ", "print(z)"],
    "description": "An example for using union"
  },
  "sets.union=>_2": {
    "prefix": "sets.union=>_2",
    "body": ["x = {'a', 'b', 'c'}", "y = {'f', 'd', 'a'}", "z = {'c', 'd', 'e'}", "result = x.union(y, z) ", "print(result)"],
    "description": "An example for using union"
  },
  "update": {
    "prefix": ".update - set",
    "body": ".update(${1:set})$0",
    "description": "Update the set with the union of this set and others"
  },
  "sets.update=>": {
    "prefix": "sets.update=>",
    "body": ["x = {'apple', 'banana', 'cherry'}", "y = {'google', 'microsoft', 'apple'}", "x.update(y) ", "print(x)"],
    "description": "An example for using update"
  },
  "class": {
    "prefix": "class=>",
    "body": ["class MyClass:", "\tpass"],
    "description": "python class"
  },
  "__init__": {
    "prefix": "__init__=>",
    "body": ["def __init__(self, name, age):", "\tself.name = name", "\tself.age = age"],
    "description": "__init__ method"
  },
  "__iter__": {
    "prefix": "__iter__=>",
    "body": ["def __iter__(self):", "\tself.a = 1", "\treturn self"],
    "description": "__iter__ method"
  },
  "__next__": {
    "prefix": "__next__=>",
    "body": ["def __next__(self):", "\tx = self.a", "\tself.a += 1", "\treturn x"],
    "description": "__next__ method"
  },
  "try:except:": {
    "prefix": "try",
    "body": "try:\n\t#comment: ${1:}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\n\t\n#END TRY$0",
    "description": "Code Snippet for a try and except blocks."
  },
  "try:except:else:finally": {
    "prefix": "tryef",
    "body": "try:\n\t#comment: ${1:}\nexcept${2:${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t#comment: ${6:}\nfinally:\n\t#comment: ${7:}\n\t\n#END TRY$0",
    "description": "Code Snippet for a try/except/finally with else statement."
  },
  "try:except:else": {
    "prefix": "trye",
    "body": "try:\n\t#comment: ${1:}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t#comment: ${5:}\n\t\n#END TRY$0",
    "description": "Code Snippet for a try/except with else statement."
  },
  "try:except:finally": {
    "prefix": "tryf",
    "body": "try:\n\t#comment: ${1:}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t#comment: ${5:}\n\t\n#END TRY$0",
    "description": "Code Snippet for a try/except/finally."
  },
  "tryexcept=>": {
    "prefix": "trye=>",
    "body": ["try:", "\tprint(x)", "except:", "\tprint('An exception occurred')"],
    "description": "tryexcept method"
  },
  "tryexceptfinally=>": {
    "prefix": "tryef=>",
    "body": ["try:", "\tprint(x)", "except:", "\tprint('Something went wrong')", "finally:", "\tprint('The try except is finished')"],
    "description": "tryexceptfinally method"
  },
  "openFile=>": {
    "prefix": "file=>openFile",
    "body": "f = open('${1:pyfile.txt}', '${2:r)')\nprint(f.read())$0",
    "description": "open a file"
  },
  "openFileReadLine=>": {
    "prefix": "file=>openFileReadLine",
    "body": "f = open('${1:pyfile.txt}', '${2:r)')\nprint(f.readline())$0",
    "description": "Read one line of the file"
  },
  "writeExistFile=>": {
    "prefix": "file=>writeExistFile",
    "body": "f = open('${1:pyfile.txt}', '${2:a)')\nf.write(${2:\"text here\"))$0",
    "description": "Write to an Existing File"
  },
  "writeOverWrite=>": {
    "prefix": "file=>writeOverWrite",
    "body": "f = open('${1:pyfile.txt}', '${2:w)')\nf.write(${2:\"new text\"))$0",
    "description": "Open a file and overwrite the content"
  },
  "deleteFile=>": {
    "prefix": "file=>deleteFile",
    "body": ["#import os", "os.remove('pyfile.txt')"],
    "description": "delete a file"
  },
  "class=>_1": {
    "prefix": "class=>_1",
    "body": ["class Person:", "\t\tpass  # An empty block", "p = Person()", "print(p)"],
    "description": "oop inheritance example"
  },
  "class=>inheritance_1": {
    "prefix": "class=>inheritance_1",
    "body": [
      "class Bird:",
      "",
      "\tdef __init__(self):",
      "\t\tprint('Bird is ready')",
      "",
      "\tdef whoisThis(self):",
      "\t\tprint('Bird')",
      "",
      "\tdef swim(self):",
      "\t\tprint('Swim faster')",
      "",
      "# child class",
      "class Penguin(Bird):",
      "",
      "\tdef __init__(self):",
      "\t\t# call super() function",
      "\t\tsuper().__init__()",
      "\t\tprint('Penguin is ready')",
      "",
      "\tdef whoisThis(self):",
      "\t\tprint('Penguin')",
      "",
      "\tdef run(self):",
      "\t\tprint('Run faster')",
      "",
      "peggy = Penguin()",
      "peggy.whoisThis()",
      "peggy.swim()",
      "peggy.run()"
    ],
    "description": "oop inheritance example"
  },
  "class=>inheritance_2": {
    "prefix": "class=>inheritance_2",
    "body": [
      "class SchoolMember:",
      "\t\t'''Represents any school member.'''",
      "\t\tdef __init__(self, name, age):",
      "\t\t\t\tself.name = name",
      "\t\t\t\tself.age = age",
      "\t\t\t\tprint('(Initialized SchoolMember: {})'.format(self.name))",
      "\t\tdef tell(self):",
      "\t\t\t\t'''Tell my details.'''",
      "\t\t\t\tprint('Name:{} Age:{}'.format(self.name, self.age), end=' ')",
      "class Teacher(SchoolMember):",
      "\t\t'''Represents a teacher.'''",
      "\t\tdef __init__(self, name, age, salary):",
      "\t\t\t\tSchoolMember.__init__(self, name, age)",
      "\t\t\t\tself.salary = salary",
      "\t\t\t\tprint('(Initialized Teacher: {})'.format(self.name))",
      "\t\tdef tell(self):",
      "\t\t\t\tSchoolMember.tell(self)",
      "\t\t\t\tprint('Salary: {:d}'.format(self.salary))",
      "class Student(SchoolMember):",
      "\t\t'''Represents a student.'''",
      "\t\tdef __init__(self, name, age, marks):",
      "\t\t\t\tSchoolMember.__init__(self, name, age)",
      "\t\t\t\tself.marks = marks",
      "\t\t\t\tprint('(Initialized Student: {})'.format(self.name))",
      "\t\tdef tell(self):",
      "\t\t\t\tSchoolMember.tell(self)",
      "\t\t\t\tprint('Marks: {:d}'.format(self.marks))",
      "t = Teacher('Mrs. Shrividya', 40, 30000)",
      "s = Student('Swaroop', 25, 75)",
      "# prints a blank line",
      "print()",
      "members = [t, s]",
      "for member in members:",
      "\t\t# Works for both Teachers and Students",
      "\t\tmember.tell()"
    ],
    "description": "oop inheritance example"
  },
  "class=>with_attribute_1": {
    "prefix": "class=>with_attribute_1",
    "body": [
      "class Parrot:",
      "",
      "# class attribute",
      " species = 'bird'",
      "",
      "# instance attribute",
      " def __init__(self, name, age):",
      "\tself.name = name",
      "\tself.age = age",
      "",
      "# instantiate the Parrot class",
      "blu = Parrot('Blu', 10)",
      "woo = Parrot('woo', 15)",
      "",
      "# access the class attributes",
      "print('Blu is a {}'.format(blu.__class__.species))",
      "print('Woo is also a {}'.format(woo.__class__.species))",
      "# access the instance attributes",
      "print('{} is {} years old'.format(blu.name, blu.age))",
      "print('{} is {} years old'.format(woo.name, woo.age))"
    ],
    "description": "class with attribute example"
  },
  "class=>with_attribute_2": {
    "prefix": "class=>with_attribute_2",
    "body": [
      "class Person:",
      "\tdef __init__(self, name):",
      "\t\tself.name = name",
      "\tdef say_hi(self):",
      "\t\tprint('Hello, my name is', self.name)",
      "p = Person('Swaroop')",
      "p.say_hi()",
      "# The previous 2 lines can also be written as",
      "# Person('Swaroop').say_hi()"
    ],
    "description": "class with attribute example"
  },
  "class=>with_attribute_3": {
    "prefix": "class=>with_attribute_3",
    "body": [
      "class Robot:",
      "\t'''Represents a robot, with a name.'''",
      "\t# A class variable, counting the number of robots",
      "\tpopulation = 0",
      "\tdef __init__(self, name):",
      "\t\t'''Initializes the data.'''",
      "\t\tself.name = name",
      "\t\tprint('(Initializing {})'.format(self.name))",
      "\t\t# When this person is created, the robot",
      "\t\t# adds to the population",
      "\t\tRobot.population += 1",
      "\tdef die(self):",
      "\t\t'''I am dying.'''",
      "\t\tprint('{} is being destroyed!'.format(self.name))",
      "\t\tRobot.population -= 1",
      "\t\tif Robot.population == 0:",
      "\t\t\t\tprint('{} was the last one.'.format(self.name))",
      "\t\telse:",
      "\t\t\t\tprint('There are still {:d} robots working.'.format(",
      "\t\t\t\t\tRobot.population))",
      "\tdef say_hi(self):",
      "\t\t'''Greeting by the robot.",
      "\t\tYeah, they can do that.'''",
      "\t\tprint('Greetings, my masters call me {}.'.format(self.name))",
      "\t@classmethod",
      "\tdef how_many(cls):",
      "\t\t'''Prints the current population.'''",
      "\t\tprint('We have {:d} robots.'.format(cls.population))",
      "droid1 = Robot('R2-D2')",
      "droid1.say_hi()",
      "Robot.how_many()",
      "droid2 = Robot('C-3PO')",
      "droid2.say_hi()",
      "Robot.how_many()",
      "print('Robots can do some work here.')",
      "print('Robots have finished their work. So lets destroy them.')",
      "droid1.die()",
      "droid2.die()",
      "Robot.how_many()"
    ],
    "description": "class with attribute example"
  },
  "class=>with_method_1": {
    "prefix": "class=>with_method_1",
    "body": [
      "class Parrot:",
      "",
      "# instance attributes",
      " def __init__(self, name, age):",
      "\tself.name = name",
      "\tself.age = age",
      "",
      "# instance method",
      " def sing(self, song):",
      "\treturn '{} sings {}'.format(self.name, song)",
      "",
      " def dance(self):",
      "\treturn '{} is now dancing'.format(self.name)",
      "",
      "# instantiate the object",
      "blu = Parrot('Blu', 10)",
      "# call our instance methods",
      "print(blu.sing('Happy'))",
      "print(blu.dance())"
    ],
    "description": "class with method example"
  },
  "class=>with_method_2": {
    "prefix": "class=>with_method_2",
    "body": ["class Person:", "\tdef say_hi(self):", "\t\tprint('Hello, how are you?')", "p = Person()", "p.say_hi()", "# The previous 2 lines can also be written as", "# Person().say_hi()"],
    "description": "class with method example"
  },
  "class=>encapsulation": {
    "prefix": "class=>encapsulation",
    "body": [
      "class Computer:",
      "",
      " def __init__(self):",
      "\tself.__maxprice = 900",
      "",
      " def sell(self):",
      "\tprint('Selling Price: {}'.format(self.__maxprice))",
      "",
      " def setMaxPrice(self, price):",
      "\tself.__maxprice = price",
      "",
      "c = Computer()",
      "c.sell()",
      "",
      "# change the price",
      "c.__maxprice = 1000",
      "c.sell()",
      "",
      "# using setter function",
      "c.setMaxPrice(1000)",
      "c.sell()"
    ],
    "description": "class encapsulation example"
  },
  "class=>polymorphism": {
    "prefix": "class=>polymorphism",
    "body": [
      "class Parrot:",
      "",
      " def fly(self):",
      "\tprint('Parrot can fly')",
      "",
      " def swim(self):",
      "\tprint('Parrot can not swim')",
      "",
      "class Penguin:",
      "",
      " def fly(self):",
      "\tprint('Penguin can not fly')",
      "",
      " def swim(self):",
      "\tprint('Penguin can swim')",
      "",
      "# common interface",
      "def flying_test(bird):",
      "\tbird.fly()",
      "",
      "#instantiate objects",
      "blu = Parrot()",
      "peggy = Penguin()",
      "",
      "# passing the object",
      "flying_test(blu)",
      "flying_test(peggy)"
    ],
    "description": "class polymorphism example"
  },
  "class=>polymorphism": {
    "prefix": "class=>polymorphism",
    "body": [
      "class Parrot:",
      "",
      " def fly(self):",
      "\tprint('Parrot can fly')",
      "",
      " def swim(self):",
      "\tprint('Parrot can not swim')",
      "",
      "class Penguin:",
      "",
      " def fly(self):",
      "\tprint('Penguin can not fly')",
      "",
      " def swim(self):",
      "\tprint('Penguin can swim')",
      "",
      "# common interface",
      "def flying_test(bird):",
      "\tbird.fly()",
      "",
      "#instantiate objects",
      "blu = Parrot()",
      "peggy = Penguin()",
      "",
      "# passing the object",
      "flying_test(blu)",
      "flying_test(peggy)"
    ],
    "description": "class polymorphism example"
  }
}
